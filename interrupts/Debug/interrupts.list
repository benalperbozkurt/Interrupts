
interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b38  08008b38  00009b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b5c  08008b5c  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b5c  08008b5c  00009b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b60  08008b60  00009b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008b64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d26  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d7  00000000  00000000  0001edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000226b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  000237f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002340a  00000000  00000000  0002450f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a99b  00000000  00000000  00047919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7f1  00000000  00000000  000622b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012daa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ab4  00000000  00000000  0012dae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0013259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b20 	.word	0x08008b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008b20 	.word	0x08008b20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc2a 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f822 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f91e 	bl	8000704 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f888 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8b4 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8e2 	bl	8000698 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 fece 	bl	8008274 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 fef2 	bl	80082c0 <MX_USB_HOST_Process>

    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,1);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004e2:	4808      	ldr	r0, [pc, #32]	@ (8000504 <main+0x4c>)
 80004e4:	f000 ff5a 	bl	800139c <HAL_GPIO_WritePin>
       HAL_Delay(100);
 80004e8:	2064      	movs	r0, #100	@ 0x64
 80004ea:	f000 fc85 	bl	8000df8 <HAL_Delay>
       HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <main+0x4c>)
 80004f6:	f000 ff51 	bl	800139c <HAL_GPIO_WritePin>
       HAL_Delay(100);
 80004fa:	2064      	movs	r0, #100	@ 0x64
 80004fc:	f000 fc7c 	bl	8000df8 <HAL_Delay>
    MX_USB_HOST_Process();
 8000500:	bf00      	nop
 8000502:	e7e9      	b.n	80004d8 <main+0x20>
 8000504:	40020c00 	.word	0x40020c00

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fa74 	bl	8008a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fe34 	bl	80041fc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9cb 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f895 	bl	80046ec <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9b4 	bl	8000934 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f003 f80b 	bl	8003634 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f986 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000098 	.word	0x20000098
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2S3_Init+0x54>)
 8000678:	f003 f920 	bl	80038bc <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f957 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000ec 	.word	0x200000ec
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f004 fb4d 	bl	8004d88 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f91e 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000134 	.word	0x20000134
 8000700:	40013000 	.word	0x40013000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b6f      	ldr	r3, [pc, #444]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a6e      	ldr	r2, [pc, #440]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b6c      	ldr	r3, [pc, #432]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b68      	ldr	r3, [pc, #416]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a67      	ldr	r2, [pc, #412]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b65      	ldr	r3, [pc, #404]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b61      	ldr	r3, [pc, #388]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a60      	ldr	r2, [pc, #384]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b5e      	ldr	r3, [pc, #376]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b5a      	ldr	r3, [pc, #360]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a59      	ldr	r2, [pc, #356]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b57      	ldr	r3, [pc, #348]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b53      	ldr	r3, [pc, #332]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a52      	ldr	r2, [pc, #328]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b50      	ldr	r3, [pc, #320]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a4b      	ldr	r2, [pc, #300]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b49      	ldr	r3, [pc, #292]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4846      	ldr	r0, [pc, #280]	@ (80008e0 <MX_GPIO_Init+0x1dc>)
 80007c8:	f000 fde8 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	4844      	ldr	r0, [pc, #272]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 80007d2:	f000 fde3 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d6:	2200      	movs	r2, #0
 80007d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007dc:	4842      	ldr	r0, [pc, #264]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80007de:	f000 fddd 	bl	800139c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e2:	2308      	movs	r3, #8
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4839      	ldr	r0, [pc, #228]	@ (80008e0 <MX_GPIO_Init+0x1dc>)
 80007fa:	f000 fc33 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000816:	f000 fc25 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082a:	2305      	movs	r3, #5
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	482b      	ldr	r0, [pc, #172]	@ (80008e4 <MX_GPIO_Init+0x1e0>)
 8000836:	f000 fc15 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : kesme_Pin */
  GPIO_InitStruct.Pin = kesme_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(kesme_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4827      	ldr	r0, [pc, #156]	@ (80008ec <MX_GPIO_Init+0x1e8>)
 8000850:	f000 fc08 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000854:	2304      	movs	r3, #4
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4822      	ldr	r0, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0x1ec>)
 8000868:	f000 fbfc 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800086c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fbeb 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000892:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80008a8:	f000 fbdc 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ac:	2320      	movs	r3, #32
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <MX_GPIO_Init+0x1e4>)
 80008c0:	f000 fbd0 	bl	8001064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2006      	movs	r0, #6
 80008ca:	f000 fb94 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ce:	2006      	movs	r0, #6
 80008d0:	f000 fbad 	bl	800102e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	@ 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400

080008f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==kesme_Pin){
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d111      	bne.n	8000928 <HAL_GPIO_EXTI_Callback+0x34>


  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800090a:	4809      	ldr	r0, [pc, #36]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x3c>)
 800090c:	f000 fd46 	bl	800139c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000910:	2064      	movs	r0, #100	@ 0x64
 8000912:	f000 fa71 	bl	8000df8 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x3c>)
 800091e:	f000 fd3d 	bl	800139c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000922:	2064      	movs	r0, #100	@ 0x64
 8000924:	f000 fa68 	bl	8000df8 <HAL_Delay>

}
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020c00 	.word	0x40020c00

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097e:	2007      	movs	r0, #7
 8000980:	f000 fb2e 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <HAL_I2C_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12c      	bne.n	8000a0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ce:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e0:	2304      	movs	r3, #4
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <HAL_I2C_MspInit+0x8c>)
 80009ec:	f000 fb3a 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_I2C_MspInit+0x88>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40005400 	.word	0x40005400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <HAL_I2S_MspInit+0xf0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d15a      	bne.n	8000b06 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a54:	23c0      	movs	r3, #192	@ 0xc0
 8000a56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f84f 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a6c:	f7ff ff62 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a26      	ldr	r2, [pc, #152]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a18      	ldr	r2, [pc, #96]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_I2S_MspInit+0xf4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <HAL_I2S_MspInit+0xf8>)
 8000ae0:	f000 fac0 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ae4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af6:	2306      	movs	r3, #6
 8000af8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <HAL_I2S_MspInit+0xfc>)
 8000b02:	f000 faaf 	bl	8001064 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	@ 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40003c00 	.word	0x40003c00
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020800 	.word	0x40020800

08000b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <HAL_SPI_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12b      	bne.n	8000b9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_SPI_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b7a:	23e0      	movs	r3, #224	@ 0xe0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <HAL_SPI_MspInit+0x8c>)
 8000b96:	f000 fa65 	bl	8001064 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40013000 	.word	0x40013000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c06:	f000 f8d7 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(kesme_Pin);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fbdc 	bl	80013d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f000 fecd 	bl	80019c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000570 	.word	0x20000570

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f007 fee8 	bl	8008a34 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000018c 	.word	0x2000018c
 8000c98:	20000a98 	.word	0x20000a98

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f007 fea7 	bl	8008a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fbe1 	bl	80004b8 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d04:	08008b64 	.word	0x08008b64
  ldr r2, =_sbss
 8000d08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d0c:	20000a98 	.word	0x20000a98

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdfa 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000190 	.word	0x20000190

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000190 	.word	0x20000190

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e16b      	b.n	8001358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 815a 	bne.w	8001352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80b4 	beq.w	8001352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <HAL_GPIO_Init+0x30c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a5b      	ldr	r2, [pc, #364]	@ (8001374 <HAL_GPIO_Init+0x310>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	@ (800137c <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	@ (8001380 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	@ (8001388 <HAL_GPIO_Init+0x324>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <HAL_GPIO_Init+0x328>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	@ (8001394 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x20a>
 800126a:	2307      	movs	r3, #7
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x228>
 800126e:	2308      	movs	r3, #8
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x228>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <HAL_GPIO_Init+0x310>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <HAL_GPIO_Init+0x334>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_GPIO_Init+0x334>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_GPIO_Init+0x334>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae90 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fa80 	bl	80008f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e059      	b.n	80014c6 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f006 ff7f 	bl	8008330 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001440:	d102      	bne.n	8001448 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fd99 	bl	8004f84 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c1a      	ldrb	r2, [r3, #16]
 800145a:	f88d 2000 	strb.w	r2, [sp]
 800145e:	3304      	adds	r3, #4
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	f003 fd1a 	bl	8004e9a <USB_CoreInit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e026      	b.n	80014c6 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fd91 	bl	8004fa6 <USB_SetCurrentMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e017      	b.n	80014c6 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7c1a      	ldrb	r2, [r3, #16]
 800149e:	f88d 2000 	strb.w	r2, [sp]
 80014a2:	3304      	adds	r3, #4
 80014a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a6:	f003 ff33 	bl	8005310 <USB_HostInit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e004      	b.n	80014c6 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b08b      	sub	sp, #44	@ 0x2c
 80014d2:	af04      	add	r7, sp, #16
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	70fb      	strb	r3, [r7, #3]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70bb      	strb	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80014e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014ea:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_HCD_HC_Init+0x2c>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e09d      	b.n	8001636 <HAL_HCD_HC_Init+0x168>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3319      	adds	r3, #25
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3314      	adds	r3, #20
 8001526:	787a      	ldrb	r2, [r7, #1]
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3315      	adds	r3, #21
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3326      	adds	r3, #38	@ 0x26
 800154e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800155c:	b2d8      	uxtb	r0, r3
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3316      	adds	r3, #22
 800156c:	4602      	mov	r2, r0
 800156e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fbc7 	bl	8001d08 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800157a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800157e:	2b00      	cmp	r3, #0
 8001580:	da0a      	bge.n	8001598 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3317      	adds	r3, #23
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e009      	b.n	80015ac <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3317      	adds	r3, #23
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f811 	bl	80055d8 <USB_GetHostSpeed>
 80015b6:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80015b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10b      	bne.n	80015d8 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80015c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d107      	bne.n	80015d8 <HAL_HCD_HC_Init+0x10a>
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2bbc      	cmp	r3, #188	@ 0xbc
 80015d2:	d901      	bls.n	80015d8 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80015d4:	23bc      	movs	r3, #188	@ 0xbc
 80015d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3318      	adds	r3, #24
 80015e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	b298      	uxth	r0, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3328      	adds	r3, #40	@ 0x28
 8001602:	4602      	mov	r2, r0
 8001604:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	b29b      	uxth	r3, r3
 800160e:	787c      	ldrb	r4, [r7, #1]
 8001610:	78ba      	ldrb	r2, [r7, #2]
 8001612:	78f9      	ldrb	r1, [r7, #3]
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4623      	mov	r3, r4
 8001624:	f004 f800 	bl	8005628 <USB_HC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_HCD_HC_Halt+0x1e>
 8001658:	2302      	movs	r3, #2
 800165a:	e00f      	b.n	800167c <HAL_HCD_HC_Halt+0x3e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fb92 	bl	8005d96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	70fb      	strb	r3, [r7, #3]
 8001696:	460b      	mov	r3, r1
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3317      	adds	r3, #23
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3326      	adds	r3, #38	@ 0x26
 80016c2:	787a      	ldrb	r2, [r7, #1]
 80016c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016c6:	7c3b      	ldrb	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d114      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	332a      	adds	r3, #42	@ 0x2a
 80016dc:	2203      	movs	r2, #3
 80016de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3319      	adds	r3, #25
 80016f0:	7f3a      	ldrb	r2, [r7, #28]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e009      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	332a      	adds	r3, #42	@ 0x2a
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	2b03      	cmp	r3, #3
 800170e:	f200 8102 	bhi.w	8001916 <HAL_HCD_HC_SubmitRequest+0x292>
 8001712:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	08001901 	.word	0x08001901
 8001720:	080017ed 	.word	0x080017ed
 8001724:	08001877 	.word	0x08001877
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 80f5 	bne.w	800191a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d12d      	bne.n	8001792 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001736:	8b3b      	ldrh	r3, [r7, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	333d      	adds	r3, #61	@ 0x3d
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	333d      	adds	r3, #61	@ 0x3d
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	332a      	adds	r3, #42	@ 0x2a
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800177a:	e0ce      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	332a      	adds	r3, #42	@ 0x2a
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
      break;
 8001790:	e0c3      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	331a      	adds	r3, #26
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 80b8 	bne.w	800191a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	333c      	adds	r3, #60	@ 0x3c
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	332a      	adds	r3, #42	@ 0x2a
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
      break;
 80017d4:	e0a1      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	332a      	adds	r3, #42	@ 0x2a
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e096      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d120      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	333d      	adds	r3, #61	@ 0x3d
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	332a      	adds	r3, #42	@ 0x2a
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800181c:	e07e      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	332a      	adds	r3, #42	@ 0x2a
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
      break;
 8001832:	e073      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	333c      	adds	r3, #60	@ 0x3c
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	332a      	adds	r3, #42	@ 0x2a
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
      break;
 800185e:	e05d      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	332a      	adds	r3, #42	@ 0x2a
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e052      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001876:	78bb      	ldrb	r3, [r7, #2]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d120      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333d      	adds	r3, #61	@ 0x3d
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	332a      	adds	r3, #42	@ 0x2a
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018a6:	e039      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	332a      	adds	r3, #42	@ 0x2a
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e02e      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	333c      	adds	r3, #60	@ 0x3c
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	332a      	adds	r3, #42	@ 0x2a
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e018      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	332a      	adds	r3, #42	@ 0x2a
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e00d      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	332a      	adds	r3, #42	@ 0x2a
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e002      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800191a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	332c      	adds	r3, #44	@ 0x2c
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	8b39      	ldrh	r1, [r7, #24]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4403      	add	r3, r0
 8001940:	3334      	adds	r3, #52	@ 0x34
 8001942:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	334c      	adds	r3, #76	@ 0x4c
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3338      	adds	r3, #56	@ 0x38
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3315      	adds	r3, #21
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	334d      	adds	r3, #77	@ 0x4d
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	3310      	adds	r3, #16
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	1d19      	adds	r1, r3, #4
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	799b      	ldrb	r3, [r3, #6]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f003 ff66 	bl	8005880 <USB_HC_StartXfer>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fc5b 	bl	8005292 <USB_GetMode>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80fb 	bne.w	8001bda <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fc1e 	bl	800522a <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80f1 	beq.w	8001bd8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fc15 	bl	800522a <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fc05 	bl	800522a <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fbf5 	bl	800522a <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fbe5 	bl	800522a <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d103      	bne.n	8001a72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fbd7 	bl	800522a <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a86:	d120      	bne.n	8001aca <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d113      	bne.n	8001aca <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	6938      	ldr	r0, [r7, #16]
 8001aa6:	f003 faca 	bl	800503e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001aaa:	6938      	ldr	r0, [r7, #16]
 8001aac:	f003 faf9 	bl	80050a2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d105      	bne.n	8001ac4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fcea 	bl	8005498 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f006 fcb1 	bl	800842c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fbab 	bl	800522a <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ade:	d102      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f001 fd33 	bl	800354c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fb9d 	bl	800522a <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d106      	bne.n	8001b08 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 fc7a 	bl	80083f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2208      	movs	r2, #8
 8001b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fb8c 	bl	800522a <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b1c:	d139      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f926 	bl	8005d74 <USB_HC_ReadInterrupt>
 8001b28:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e025      	b.n	8001b7c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b5a:	d106      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f905 	bl	8001d72 <HCD_HC_IN_IRQHandler>
 8001b68:	e005      	b.n	8001b76 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 ff67 	bl	8002a44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	795b      	ldrb	r3, [r3, #5]
 8001b80:	461a      	mov	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d3d3      	bcc.n	8001b30 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fb47 	bl	800522a <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_IRQHandler+0x1ea>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_HCD_IRQHandler+0x1ec>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d014      	beq.n	8001bda <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0210 	bic.w	r2, r2, #16
 8001bbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f001 fbe4 	bl	800338e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	e000      	b.n	8001bda <HAL_HCD_IRQHandler+0x21a>
      return;
 8001bd8:	bf00      	nop
    }
  }
}
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_HCD_Start+0x16>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e013      	b.n	8001c1e <HAL_HCD_Start+0x3e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 fcae 	bl	8005566 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 f9a7 	bl	8004f62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_HCD_Stop+0x16>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e00d      	b.n	8001c58 <HAL_HCD_Stop+0x32>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fa01 	bl	8006050 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fc50 	bl	8005512 <USB_ResetPort>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	334c      	adds	r3, #76	@ 0x4c
 8001c98:	781b      	ldrb	r3, [r3, #0]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3338      	adds	r3, #56	@ 0x38
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fc92 	bl	8005606 <USB_GetCurrentFrame>
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fc6d 	bl	80055d8 <USB_GetHostSpeed>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	331a      	adds	r3, #26
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	331b      	adds	r3, #27
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3325      	adds	r3, #37	@ 0x25
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3324      	adds	r3, #36	@ 0x24
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fa5d 	bl	8005250 <USB_ReadChInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d11a      	bne.n	8001dd6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dac:	461a      	mov	r2, r3
 8001dae:	2304      	movs	r3, #4
 8001db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	334d      	adds	r3, #77	@ 0x4d
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 ffe1 	bl	8005d96 <USB_HC_Halt>
 8001dd4:	e09e      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fa36 	bl	8005250 <USB_ReadChInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dee:	d11b      	bne.n	8001e28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	334d      	adds	r3, #77	@ 0x4d
 8001e14:	2208      	movs	r2, #8
 8001e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 ffb8 	bl	8005d96 <USB_HC_Halt>
 8001e26:	e075      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa0d 	bl	8005250 <USB_ReadChInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d11a      	bne.n	8001e76 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2308      	movs	r3, #8
 8001e50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	334d      	adds	r3, #77	@ 0x4d
 8001e62:	2206      	movs	r2, #6
 8001e64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 ff91 	bl	8005d96 <USB_HC_Halt>
 8001e74:	e04e      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 f9e6 	bl	8005250 <USB_ReadChInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	d11b      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	334d      	adds	r3, #77	@ 0x4d
 8001eb4:	2209      	movs	r2, #9
 8001eb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 ff68 	bl	8005d96 <USB_HC_Halt>
 8001ec6:	e025      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f9bd 	bl	8005250 <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d119      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	334d      	adds	r3, #77	@ 0x4d
 8001f02:	2207      	movs	r2, #7
 8001f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 ff41 	bl	8005d96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f997 	bl	8005250 <USB_ReadChInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2c:	d112      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 ff2d 	bl	8005d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4e:	6093      	str	r3, [r2, #8]
 8001f50:	f000 bd75 	b.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f977 	bl	8005250 <USB_ReadChInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f040 8128 	bne.w	80021be <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	331b      	adds	r3, #27
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d119      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	0151      	lsls	r1, r2, #5
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	440a      	add	r2, r1
 8001fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	799b      	ldrb	r3, [r3, #6]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01b      	beq.n	800200a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3330      	adds	r3, #48	@ 0x30
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	1ac9      	subs	r1, r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4403      	add	r3, r0
 8002006:	3338      	adds	r3, #56	@ 0x38
 8002008:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	334d      	adds	r3, #77	@ 0x4d
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3344      	adds	r3, #68	@ 0x44
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2301      	movs	r3, #1
 8002042:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3326      	adds	r3, #38	@ 0x26
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3326      	adds	r3, #38	@ 0x26
 800206a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800206c:	2b02      	cmp	r3, #2
 800206e:	d110      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fe8c 	bl	8005d96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2310      	movs	r3, #16
 800208e:	6093      	str	r3, [r2, #8]
 8002090:	e03d      	b.n	800210e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3326      	adds	r3, #38	@ 0x26
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d00a      	beq.n	80020be <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3326      	adds	r3, #38	@ 0x26
 80020b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d127      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	0151      	lsls	r1, r2, #5
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	440a      	add	r2, r1
 80020d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	334c      	adds	r3, #76	@ 0x4c
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	334c      	adds	r3, #76	@ 0x4c
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f006 f99d 	bl	8008448 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	799b      	ldrb	r3, [r3, #6]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d13b      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3338      	adds	r3, #56	@ 0x38
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4403      	add	r3, r0
 8002136:	3328      	adds	r3, #40	@ 0x28
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	440b      	add	r3, r1
 800213c:	1e59      	subs	r1, r3, #1
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4403      	add	r3, r0
 800214c:	3328      	adds	r3, #40	@ 0x28
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	fbb1 f3f3 	udiv	r3, r1, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8470 	beq.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	333c      	adds	r3, #60	@ 0x3c
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	333c      	adds	r3, #60	@ 0x3c
 8002186:	4602      	mov	r2, r0
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	f000 bc58 	b.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	333c      	adds	r3, #60	@ 0x3c
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	333c      	adds	r3, #60	@ 0x3c
 80021b6:	4602      	mov	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	f000 bc40 	b.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f842 	bl	8005250 <USB_ReadChInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d131      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2320      	movs	r3, #32
 80021e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	331a      	adds	r3, #26
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 841f 	bne.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	331b      	adds	r3, #27
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	334d      	adds	r3, #77	@ 0x4d
 8002224:	2203      	movs	r2, #3
 8002226:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fdb0 	bl	8005d96 <USB_HC_Halt>
 8002236:	f000 bc02 	b.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f804 	bl	8005250 <USB_ReadChInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	f040 8305 	bne.w	800285e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2302      	movs	r3, #2
 8002264:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	@ 0x4d
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d114      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334c      	adds	r3, #76	@ 0x4c
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e2cc      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	334d      	adds	r3, #77	@ 0x4d
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d114      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	334d      	adds	r3, #77	@ 0x4d
 80022cc:	2202      	movs	r2, #2
 80022ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334c      	adds	r3, #76	@ 0x4c
 80022e0:	2205      	movs	r2, #5
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e2ac      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	334d      	adds	r3, #77	@ 0x4d
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b07      	cmp	r3, #7
 80022fa:	d00b      	beq.n	8002314 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	334d      	adds	r3, #77	@ 0x4d
 800230c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800230e:	2b09      	cmp	r3, #9
 8002310:	f040 80a6 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334d      	adds	r3, #77	@ 0x4d
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3344      	adds	r3, #68	@ 0x44
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1c59      	adds	r1, r3, #1
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4403      	add	r3, r0
 8002348:	3344      	adds	r3, #68	@ 0x44
 800234a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	@ 0x44
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d943      	bls.n	80023ea <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3344      	adds	r3, #68	@ 0x44
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	331a      	adds	r3, #26
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d123      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	331b      	adds	r3, #27
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	331c      	adds	r3, #28
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	0151      	lsls	r1, r2, #5
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	440a      	add	r2, r1
 80023ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334c      	adds	r3, #76	@ 0x4c
 80023e4:	2204      	movs	r2, #4
 80023e6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023e8:	e229      	b.n	800283e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	334c      	adds	r3, #76	@ 0x4c
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3326      	adds	r3, #38	@ 0x26
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3326      	adds	r3, #38	@ 0x26
 8002424:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002426:	2b02      	cmp	r3, #2
 8002428:	f040 8209 	bne.w	800283e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002442:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800244a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800245e:	e1ee      	b.n	800283e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334d      	adds	r3, #77	@ 0x4d
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b05      	cmp	r3, #5
 8002474:	f040 80c8 	bne.w	8002608 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	334d      	adds	r3, #77	@ 0x4d
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	331b      	adds	r3, #27
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f040 81ce 	bne.w	8002840 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3326      	adds	r3, #38	@ 0x26
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d16b      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3348      	adds	r3, #72	@ 0x48
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c59      	adds	r1, r3, #1
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4403      	add	r3, r0
 80024da:	3348      	adds	r3, #72	@ 0x48
 80024dc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3348      	adds	r3, #72	@ 0x48
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d943      	bls.n	800257c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3348      	adds	r3, #72	@ 0x48
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	331b      	adds	r3, #27
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	@ 0x44
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d809      	bhi.n	8002546 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	331c      	adds	r3, #28
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	0151      	lsls	r1, r2, #5
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	440a      	add	r2, r1
 800255c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	334c      	adds	r3, #76	@ 0x4c
 8002576:	2204      	movs	r2, #4
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e014      	b.n	80025a6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	334c      	adds	r3, #76	@ 0x4c
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e009      	b.n	80025a6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	334c      	adds	r3, #76	@ 0x4c
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3326      	adds	r3, #38	@ 0x26
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3326      	adds	r3, #38	@ 0x26
 80025cc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 8136 	bne.w	8002840 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025ea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025f2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e11b      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	334d      	adds	r3, #77	@ 0x4d
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	f040 8081 	bne.w	8002722 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	331b      	adds	r3, #27
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 80fa 	bne.w	8002840 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	@ 0x4c
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	440a      	add	r2, r1
 8002676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	440a      	add	r2, r1
 8002696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800269a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800269e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	0151      	lsls	r1, r2, #5
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	440a      	add	r2, r1
 80026b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ba:	f023 0320 	bic.w	r3, r3, #32
 80026be:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3326      	adds	r3, #38	@ 0x26
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3326      	adds	r3, #38	@ 0x26
 80026e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f040 80a9 	bne.w	8002840 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002704:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800270c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e08e      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	334d      	adds	r3, #77	@ 0x4d
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d143      	bne.n	80027c0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334d      	adds	r3, #77	@ 0x4d
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	@ 0x4c
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3326      	adds	r3, #38	@ 0x26
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3326      	adds	r3, #38	@ 0x26
 8002786:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002788:	2b02      	cmp	r3, #2
 800278a:	d159      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e03f      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d126      	bne.n	8002824 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334d      	adds	r3, #77	@ 0x4d
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3344      	adds	r3, #68	@ 0x44
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4403      	add	r3, r0
 800280a:	3344      	adds	r3, #68	@ 0x44
 800280c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	334c      	adds	r3, #76	@ 0x4c
 800281e:	2204      	movs	r2, #4
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e00d      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	334d      	adds	r3, #77	@ 0x4d
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	f000 8100 	beq.w	8002a3c <HCD_HC_IN_IRQHandler+0xcca>
 800283c:	e000      	b.n	8002840 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800283e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334c      	adds	r3, #76	@ 0x4c
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f005 fdf6 	bl	8008448 <HAL_HCD_HC_NotifyURBChange_Callback>
 800285c:	e0ef      	b.n	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fcf2 	bl	8005250 <USB_ReadChInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002872:	2b40      	cmp	r3, #64	@ 0x40
 8002874:	d12f      	bne.n	80028d6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	2340      	movs	r3, #64	@ 0x40
 8002886:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334d      	adds	r3, #77	@ 0x4d
 8002898:	2205      	movs	r2, #5
 800289a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	331a      	adds	r3, #26
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3344      	adds	r3, #68	@ 0x44
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fa61 	bl	8005d96 <USB_HC_Halt>
 80028d4:	e0b3      	b.n	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fcb6 	bl	8005250 <USB_ReadChInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	f040 80a7 	bne.w	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3326      	adds	r3, #38	@ 0x26
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d11b      	bne.n	800293e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3344      	adds	r3, #68	@ 0x44
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334d      	adds	r3, #77	@ 0x4d
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fa2d 	bl	8005d96 <USB_HC_Halt>
 800293c:	e03f      	b.n	80029be <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3326      	adds	r3, #38	@ 0x26
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3326      	adds	r3, #38	@ 0x26
 8002964:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002966:	2b02      	cmp	r3, #2
 8002968:	d129      	bne.n	80029be <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3344      	adds	r3, #68	@ 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	799b      	ldrb	r3, [r3, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HCD_HC_IN_IRQHandler+0xc2a>
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	331b      	adds	r3, #27
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d110      	bne.n	80029be <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	334d      	adds	r3, #77	@ 0x4d
 80029ac:	2204      	movs	r2, #4
 80029ae:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f9ec 	bl	8005d96 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	331b      	adds	r3, #27
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d129      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	331b      	adds	r3, #27
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a06:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2310      	movs	r3, #16
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	e000      	b.n	8002a3e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a3c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fbf4 	bl	8005250 <USB_ReadChInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d11b      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2304      	movs	r3, #4
 8002a82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	334d      	adds	r3, #77	@ 0x4d
 8002a94:	2207      	movs	r2, #7
 8002a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 f978 	bl	8005d96 <USB_HC_Halt>
 8002aa6:	f000 bc6f 	b.w	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fbcc 	bl	8005250 <USB_ReadChInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	f040 8082 	bne.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3319      	adds	r3, #25
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d124      	bne.n	8002b36 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3319      	adds	r3, #25
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	334c      	adds	r3, #76	@ 0x4c
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	@ 0x4d
 8002b24:	2203      	movs	r2, #3
 8002b26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 f930 	bl	8005d96 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	331a      	adds	r3, #26
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 841d 	bne.w	8003388 <HCD_HC_OUT_IRQHandler+0x944>
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 8411 	bne.w	8003388 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3326      	adds	r3, #38	@ 0x26
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d009      	beq.n	8002b90 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334d      	adds	r3, #77	@ 0x4d
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 f8f2 	bl	8005d96 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3344      	adds	r3, #68	@ 0x44
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e3df      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fb3d 	bl	8005250 <USB_ReadChInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be0:	d111      	bne.n	8002c06 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bf4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 f8c9 	bl	8005d96 <USB_HC_Halt>
 8002c04:	e3c0      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fb1e 	bl	8005250 <USB_ReadChInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d168      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	@ 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fb08 	bl	8005250 <USB_ReadChInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c46:	2b40      	cmp	r3, #64	@ 0x40
 8002c48:	d112      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3319      	adds	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2340      	movs	r3, #64	@ 0x40
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	331b      	adds	r3, #27
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334d      	adds	r3, #77	@ 0x4d
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 f854 	bl	8005d96 <USB_HC_Halt>
 8002cee:	e34b      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 faa9 	bl	8005250 <USB_ReadChInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d139      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	334d      	adds	r3, #77	@ 0x4d
 8002d18:	2205      	movs	r2, #5
 8002d1a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	331a      	adds	r3, #26
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3319      	adds	r3, #25
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3344      	adds	r3, #68	@ 0x44
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 f817 	bl	8005d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2340      	movs	r3, #64	@ 0x40
 8002d78:	6093      	str	r3, [r2, #8]
 8002d7a:	e305      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fa63 	bl	8005250 <USB_ReadChInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d11a      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2308      	movs	r3, #8
 8002da4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	334d      	adds	r3, #77	@ 0x4d
 8002db6:	2206      	movs	r2, #6
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 ffe7 	bl	8005d96 <USB_HC_Halt>
 8002dc8:	e2de      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fa3c 	bl	8005250 <USB_ReadChInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d144      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3344      	adds	r3, #68	@ 0x44
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	334d      	adds	r3, #77	@ 0x4d
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3319      	adds	r3, #25
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d114      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3318      	adds	r3, #24
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3319      	adds	r3, #25
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 ff9f 	bl	8005d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2310      	movs	r3, #16
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	e28d      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 f9eb 	bl	8005250 <USB_ReadChInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e80:	2b80      	cmp	r3, #128	@ 0x80
 8002e82:	d169      	bne.n	8002f58 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	799b      	ldrb	r3, [r3, #6]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334d      	adds	r3, #77	@ 0x4d
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 ff74 	bl	8005d96 <USB_HC_Halt>
 8002eae:	e049      	b.n	8002f44 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3344      	adds	r3, #68	@ 0x44
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	3344      	adds	r3, #68	@ 0x44
 8002ed2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3344      	adds	r3, #68	@ 0x44
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d922      	bls.n	8002f30 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3344      	adds	r3, #68	@ 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	@ 0x4c
 8002f0e:	2204      	movs	r2, #4
 8002f10:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334c      	adds	r3, #76	@ 0x4c
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f005 fa8d 	bl	8008448 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f2e:	e009      	b.n	8002f44 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334c      	adds	r3, #76	@ 0x4c
 8002f40:	2202      	movs	r2, #2
 8002f42:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	6093      	str	r3, [r2, #8]
 8002f56:	e217      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 f975 	bl	8005250 <USB_ReadChInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f70:	d11b      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	2209      	movs	r2, #9
 8002f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 ff01 	bl	8005d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fa6:	6093      	str	r3, [r2, #8]
 8002fa8:	e1ee      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 f94c 	bl	8005250 <USB_ReadChInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f040 81df 	bne.w	8003382 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334d      	adds	r3, #77	@ 0x4d
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 8093 	bne.w	8003114 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	334d      	adds	r3, #77	@ 0x4d
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	@ 0x4c
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3326      	adds	r3, #38	@ 0x26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d00b      	beq.n	8003044 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	f040 8190 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	799b      	ldrb	r3, [r3, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	333d      	adds	r3, #61	@ 0x3d
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2d8      	uxtb	r0, r3
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333d      	adds	r3, #61	@ 0x3d
 8003074:	4602      	mov	r2, r0
 8003076:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	799b      	ldrb	r3, [r3, #6]
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 8171 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3334      	adds	r3, #52	@ 0x34
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8165 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3334      	adds	r3, #52	@ 0x34
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4403      	add	r3, r0
 80030ba:	3328      	adds	r3, #40	@ 0x28
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	440b      	add	r3, r1
 80030c0:	1e59      	subs	r1, r3, #1
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4403      	add	r3, r0
 80030d0:	3328      	adds	r3, #40	@ 0x28
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 813f 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	333d      	adds	r3, #61	@ 0x3d
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2d8      	uxtb	r0, r3
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	333d      	adds	r3, #61	@ 0x3d
 800310e:	4602      	mov	r2, r0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e127      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334d      	adds	r3, #77	@ 0x4d
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d120      	bne.n	800316c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	331b      	adds	r3, #27
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	f040 8107 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334c      	adds	r3, #76	@ 0x4c
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e0fb      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d13a      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334d      	adds	r3, #77	@ 0x4d
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334c      	adds	r3, #76	@ 0x4c
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	331b      	adds	r3, #27
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 80d1 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	331b      	adds	r3, #27
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	0151      	lsls	r1, r2, #5
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	440a      	add	r2, r1
 80031ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f4:	6053      	str	r3, [r2, #4]
 80031f6:	e0b5      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	334d      	adds	r3, #77	@ 0x4d
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d114      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	334d      	adds	r3, #77	@ 0x4d
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	334c      	adds	r3, #76	@ 0x4c
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e095      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334d      	adds	r3, #77	@ 0x4d
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d114      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334c      	adds	r3, #76	@ 0x4c
 8003272:	2205      	movs	r2, #5
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e075      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	@ 0x4d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b07      	cmp	r3, #7
 800328c:	d00a      	beq.n	80032a4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d170      	bne.n	8003386 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3344      	adds	r3, #68	@ 0x44
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	3344      	adds	r3, #68	@ 0x44
 80032da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3344      	adds	r3, #68	@ 0x44
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d914      	bls.n	800331c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3344      	adds	r3, #68	@ 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334c      	adds	r3, #76	@ 0x4c
 8003316:	2204      	movs	r2, #4
 8003318:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800331a:	e022      	b.n	8003362 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	@ 0x4c
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003346:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800334e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003362:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334c      	adds	r3, #76	@ 0x4c
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f005 f864 	bl	8008448 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003380:	e002      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003386:	bf00      	nop
  }
}
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b08a      	sub	sp, #40	@ 0x28
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	0c5b      	lsrs	r3, r3, #17
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d004      	beq.n	80033d4 <HCD_RXQLVL_IRQHandler+0x46>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	f000 80b6 	beq.w	800353e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033d2:	e0b7      	b.n	8003544 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80b3 	beq.w	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	332c      	adds	r3, #44	@ 0x2c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80a7 	beq.w	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3338      	adds	r3, #56	@ 0x38
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	18d1      	adds	r1, r2, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4403      	add	r3, r0
 8003418:	3334      	adds	r3, #52	@ 0x34
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4299      	cmp	r1, r3
 800341e:	f200 8083 	bhi.w	8003528 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	332c      	adds	r3, #44	@ 0x2c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	b292      	uxth	r2, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f001 fe9c 	bl	800517a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	332c      	adds	r3, #44	@ 0x2c
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	18d1      	adds	r1, r2, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4403      	add	r3, r0
 8003466:	332c      	adds	r3, #44	@ 0x2c
 8003468:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3338      	adds	r3, #56	@ 0x38
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	18d1      	adds	r1, r2, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4403      	add	r3, r0
 800348e:	3338      	adds	r3, #56	@ 0x38
 8003490:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	0cdb      	lsrs	r3, r3, #19
 80034a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	3328      	adds	r3, #40	@ 0x28
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4293      	cmp	r3, r2
 80034c0:	d13f      	bne.n	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03c      	beq.n	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333c      	adds	r3, #60	@ 0x3c
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2d8      	uxtb	r0, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	333c      	adds	r3, #60	@ 0x3c
 8003522:	4602      	mov	r2, r0
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	e00c      	b.n	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	334c      	adds	r3, #76	@ 0x4c
 8003538:	2204      	movs	r2, #4
 800353a:	701a      	strb	r2, [r3, #0]
      break;
 800353c:	e001      	b.n	8003542 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003542:	bf00      	nop
  }
}
 8003544:	bf00      	nop
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003578:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d10b      	bne.n	800359c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f004 ff3e 	bl	8008410 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d132      	bne.n	800360c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d126      	bne.n	8003606 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7a5b      	ldrb	r3, [r3, #9]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d113      	bne.n	80035e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ca:	d106      	bne.n	80035da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 ff60 	bl	8005498 <USB_InitFSLSPClkSel>
 80035d8:	e011      	b.n	80035fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 ff59 	bl	8005498 <USB_InitFSLSPClkSel>
 80035e6:	e00a      	b.n	80035fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	79db      	ldrb	r3, [r3, #7]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d106      	bne.n	80035fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f6:	461a      	mov	r2, r3
 80035f8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80035fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f004 ff30 	bl	8008464 <HAL_HCD_PortEnabled_Callback>
 8003604:	e002      	b.n	800360c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f004 ff3a 	bl	8008480 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d103      	bne.n	800361e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f043 0320 	orr.w	r3, r3, #32
 800361c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6013      	str	r3, [r2, #0]
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e12b      	b.n	800389e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd f998 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003698:	f001 fa20 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 800369c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a81      	ldr	r2, [pc, #516]	@ (80038a8 <HAL_I2C_Init+0x274>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d807      	bhi.n	80036b8 <HAL_I2C_Init+0x84>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a80      	ldr	r2, [pc, #512]	@ (80038ac <HAL_I2C_Init+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e006      	b.n	80036c6 <HAL_I2C_Init+0x92>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	@ (80038b0 <HAL_I2C_Init+0x27c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0e7      	b.n	800389e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a78      	ldr	r2, [pc, #480]	@ (80038b4 <HAL_I2C_Init+0x280>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	@ (80038a8 <HAL_I2C_Init+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <HAL_I2C_Init+0xd4>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3301      	adds	r3, #1
 8003706:	e009      	b.n	800371c <HAL_I2C_Init+0xe8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a69      	ldr	r2, [pc, #420]	@ (80038b8 <HAL_I2C_Init+0x284>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	3301      	adds	r3, #1
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800372e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	495c      	ldr	r1, [pc, #368]	@ (80038a8 <HAL_I2C_Init+0x274>)
 8003738:	428b      	cmp	r3, r1
 800373a:	d819      	bhi.n	8003770 <HAL_I2C_Init+0x13c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e59      	subs	r1, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fbb1 f3f3 	udiv	r3, r1, r3
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003750:	400b      	ands	r3, r1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_I2C_Init+0x138>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e59      	subs	r1, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fbb1 f3f3 	udiv	r3, r1, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	e051      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 800376c:	2304      	movs	r3, #4
 800376e:	e04f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_I2C_Init+0x168>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	440b      	add	r3, r1
 8003786:	fbb0 f3f3 	udiv	r3, r0, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Init+0x18e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x196>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_I2C_Init+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e58      	subs	r0, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	440b      	add	r3, r1
 80037e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800383e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6911      	ldr	r1, [r2, #16]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	000186a0 	.word	0x000186a0
 80038ac:	001e847f 	.word	0x001e847f
 80038b0:	003d08ff 	.word	0x003d08ff
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e128      	b.n	8003b20 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a90      	ldr	r2, [pc, #576]	@ (8003b28 <HAL_I2S_Init+0x26c>)
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fd f899 	bl	8000a20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003904:	f023 030f 	bic.w	r3, r3, #15
 8003908:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2202      	movs	r2, #2
 8003910:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d060      	beq.n	80039dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003922:	2310      	movs	r3, #16
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e001      	b.n	800392c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b20      	cmp	r3, #32
 8003932:	d802      	bhi.n	800393a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800393a:	2001      	movs	r0, #1
 800393c:	f001 f9c4 	bl	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003940:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394a:	d125      	bne.n	8003998 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fbb2 f2f3 	udiv	r2, r2, r3
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	3305      	adds	r3, #5
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e01f      	b.n	80039b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	461a      	mov	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	3305      	adds	r3, #5
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e00e      	b.n	80039b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	3305      	adds	r3, #5
 80039b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b2c <HAL_I2S_Init+0x270>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	08db      	lsrs	r3, r3, #3
 80039c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e003      	b.n	80039e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039dc:	2302      	movs	r3, #2
 80039de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d902      	bls.n	80039f0 <HAL_I2S_Init+0x134>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2bff      	cmp	r3, #255	@ 0xff
 80039ee:	d907      	bls.n	8003a00 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f4:	f043 0210 	orr.w	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e08f      	b.n	8003b20 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	ea42 0103 	orr.w	r1, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a1e:	f023 030f 	bic.w	r3, r3, #15
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6851      	ldr	r1, [r2, #4]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6992      	ldr	r2, [r2, #24]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a42:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d161      	bne.n	8003b10 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <HAL_I2S_Init+0x274>)
 8003a50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a37      	ldr	r2, [pc, #220]	@ (8003b34 <HAL_I2S_Init+0x278>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2S_Init+0x1a4>
 8003a5c:	4b36      	ldr	r3, [pc, #216]	@ (8003b38 <HAL_I2S_Init+0x27c>)
 8003a5e:	e001      	b.n	8003a64 <HAL_I2S_Init+0x1a8>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4932      	ldr	r1, [pc, #200]	@ (8003b34 <HAL_I2S_Init+0x278>)
 8003a6c:	428a      	cmp	r2, r1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2S_Init+0x1b8>
 8003a70:	4a31      	ldr	r2, [pc, #196]	@ (8003b38 <HAL_I2S_Init+0x27c>)
 8003a72:	e001      	b.n	8003a78 <HAL_I2S_Init+0x1bc>
 8003a74:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a78:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a7c:	f023 030f 	bic.w	r3, r3, #15
 8003a80:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2b      	ldr	r2, [pc, #172]	@ (8003b34 <HAL_I2S_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2S_Init+0x1d4>
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b38 <HAL_I2S_Init+0x27c>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2S_Init+0x1d8>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a94:	2202      	movs	r2, #2
 8003a96:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a25      	ldr	r2, [pc, #148]	@ (8003b34 <HAL_I2S_Init+0x278>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2S_Init+0x1ea>
 8003aa2:	4b25      	ldr	r3, [pc, #148]	@ (8003b38 <HAL_I2S_Init+0x27c>)
 8003aa4:	e001      	b.n	8003aaa <HAL_I2S_Init+0x1ee>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab6:	d003      	beq.n	8003ac0 <HAL_I2S_Init+0x204>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e001      	b.n	8003acc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003af8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <HAL_I2S_Init+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_I2S_Init+0x24c>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <HAL_I2S_Init+0x27c>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2S_Init+0x250>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b0c:	897a      	ldrh	r2, [r7, #10]
 8003b0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	08003c33 	.word	0x08003c33
 8003b2c:	cccccccd 	.word	0xcccccccd
 8003b30:	08003d49 	.word	0x08003d49
 8003b34:	40003800 	.word	0x40003800
 8003b38:	40003400 	.word	0x40003400

08003b3c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bbc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ffb8 	bl	8003b3c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	b292      	uxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff93 	bl	8003b50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d13a      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d109      	bne.n	8003c6c <I2S_IRQHandler+0x3a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b40      	cmp	r3, #64	@ 0x40
 8003c64:	d102      	bne.n	8003c6c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffb4 	bl	8003bd4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d126      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d11f      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ff50 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d136      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d109      	bne.n	8003cee <I2S_IRQHandler+0xbc>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b80      	cmp	r3, #128	@ 0x80
 8003ce6:	d102      	bne.n	8003cee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff45 	bl	8003b78 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d122      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d11b      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff13 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a92      	ldr	r2, [pc, #584]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d62:	4b92      	ldr	r3, [pc, #584]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a8b      	ldr	r2, [pc, #556]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d80:	4b8a      	ldr	r3, [pc, #552]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d82:	e001      	b.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d94:	d004      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 8099 	bne.w	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d107      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f925 	bl	8004004 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9c8 	bl	8004164 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d13a      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003df2:	4b6e      	ldr	r3, [pc, #440]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df4:	e001      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003df6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4969      	ldr	r1, [pc, #420]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e02:	428b      	cmp	r3, r1
 8003e04:	d101      	bne.n	8003e0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e06:	4b69      	ldr	r3, [pc, #420]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e08:	e001      	b.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f043 0202 	orr.w	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fe88 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	f040 80c3 	bne.w	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80bd 	beq.w	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a49      	ldr	r2, [pc, #292]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e86:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4944      	ldr	r1, [pc, #272]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e96:	428b      	cmp	r3, r1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e9a:	4b44      	ldr	r3, [pc, #272]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9c:	e001      	b.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fe4a 	bl	8003b64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed0:	e089      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d107      	bne.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8be 	bl	8004068 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8fd 	bl	8004100 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d12f      	bne.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02a      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4919      	ldr	r1, [pc, #100]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f48:	4b18      	ldr	r3, [pc, #96]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4a:	e001      	b.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fdfa 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d136      	bne.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d031      	beq.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4902      	ldr	r1, [pc, #8]	@ (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9e:	428b      	cmp	r3, r1
 8003fa0:	d106      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fa2:	4b02      	ldr	r3, [pc, #8]	@ (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa4:	e006      	b.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fa6:	bf00      	nop
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40003400 	.word	0x40003400
 8003fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fb8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fdc0 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe4:	e000      	b.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe6:	bf00      	nop
}
 8003fe8:	bf00      	nop
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	1c99      	adds	r1, r3, #2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6251      	str	r1, [r2, #36]	@ 0x24
 8004016:	881a      	ldrh	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004044:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ffc9 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c99      	adds	r1, r3, #2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6251      	str	r1, [r2, #36]	@ 0x24
 800407a:	8819      	ldrh	r1, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1d      	ldr	r2, [pc, #116]	@ (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <I2SEx_TxISR_I2SExt+0x22>
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 8004088:	e001      	b.n	800408e <I2SEx_TxISR_I2SExt+0x26>
 800408a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408e:	460a      	mov	r2, r1
 8004090:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d121      	bne.n	80040ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <I2SEx_TxISR_I2SExt+0x50>
 80040b4:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 80040b6:	e001      	b.n	80040bc <I2SEx_TxISR_I2SExt+0x54>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	490d      	ldr	r1, [pc, #52]	@ (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d101      	bne.n	80040cc <I2SEx_TxISR_I2SExt+0x64>
 80040c8:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 80040ca:	e001      	b.n	80040d0 <I2SEx_TxISR_I2SExt+0x68>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff81 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40003800 	.word	0x40003800
 80040fc:	40003400 	.word	0x40003400

08004100 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68d8      	ldr	r0, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	1c99      	adds	r1, r3, #2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004118:	b282      	uxth	r2, r0
 800411a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d113      	bne.n	800415c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004142:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ff4a 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a20      	ldr	r2, [pc, #128]	@ (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <I2SEx_RxISR_I2SExt+0x16>
 8004176:	4b20      	ldr	r3, [pc, #128]	@ (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 8004178:	e001      	b.n	800417e <I2SEx_RxISR_I2SExt+0x1a>
 800417a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800417e:	68d8      	ldr	r0, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	1c99      	adds	r1, r3, #2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800418a:	b282      	uxth	r2, r0
 800418c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d121      	bne.n	80041ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	@ (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <I2SEx_RxISR_I2SExt+0x50>
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_RxISR_I2SExt+0x54>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	490d      	ldr	r1, [pc, #52]	@ (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 80041c0:	428b      	cmp	r3, r1
 80041c2:	d101      	bne.n	80041c8 <I2SEx_RxISR_I2SExt+0x64>
 80041c4:	4b0c      	ldr	r3, [pc, #48]	@ (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 80041c6:	e001      	b.n	80041cc <I2SEx_RxISR_I2SExt+0x68>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff03 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40003800 	.word	0x40003800
 80041f8:	40003400 	.word	0x40003400

080041fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e267      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	4b88      	ldr	r3, [pc, #544]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d00c      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4b85      	ldr	r3, [pc, #532]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d112      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b82      	ldr	r3, [pc, #520]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b7e      	ldr	r3, [pc, #504]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e242      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b76      	ldr	r3, [pc, #472]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a75      	ldr	r2, [pc, #468]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b70      	ldr	r3, [pc, #448]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6f      	ldr	r2, [pc, #444]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b6d      	ldr	r3, [pc, #436]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6c      	ldr	r2, [pc, #432]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b69      	ldr	r3, [pc, #420]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b66      	ldr	r3, [pc, #408]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a65      	ldr	r2, [pc, #404]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fc fd94 	bl	8000de0 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fc fd90 	bl	8000de0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	@ 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e207      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b5b      	ldr	r3, [pc, #364]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fc fd80 	bl	8000de0 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fc fd7c 	bl	8000de0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	@ 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1f3      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b51      	ldr	r3, [pc, #324]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	4b4a      	ldr	r3, [pc, #296]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b47      	ldr	r3, [pc, #284]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b44      	ldr	r3, [pc, #272]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c7      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4937      	ldr	r1, [pc, #220]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <HAL_RCC_OscConfig+0x244>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fc fd35 	bl	8000de0 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437a:	f7fc fd31 	bl	8000de0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1a8      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4925      	ldr	r1, [pc, #148]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <HAL_RCC_OscConfig+0x244>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fc fd14 	bl	8000de0 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fc fd10 	bl	8000de0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e187      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d036      	beq.n	8004454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <HAL_RCC_OscConfig+0x248>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fc fcf4 	bl	8000de0 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fc fcf0 	bl	8000de0 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e167      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_OscConfig+0x240>)
 8004410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
 800441a:	e01b      	b.n	8004454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_OscConfig+0x248>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fc fcdd 	bl	8000de0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e00e      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fc fcd9 	bl	8000de0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d907      	bls.n	8004448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e150      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
 800443c:	40023800 	.word	0x40023800
 8004440:	42470000 	.word	0x42470000
 8004444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	4b88      	ldr	r3, [pc, #544]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800444a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ea      	bne.n	800442a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8097 	beq.w	8004590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004466:	4b81      	ldr	r3, [pc, #516]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	4b7d      	ldr	r3, [pc, #500]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	4a7c      	ldr	r2, [pc, #496]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	@ 0x40
 8004482:	4b7a      	ldr	r3, [pc, #488]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	4b77      	ldr	r3, [pc, #476]	@ (8004670 <HAL_RCC_OscConfig+0x474>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d118      	bne.n	80044d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449e:	4b74      	ldr	r3, [pc, #464]	@ (8004670 <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a73      	ldr	r2, [pc, #460]	@ (8004670 <HAL_RCC_OscConfig+0x474>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fc fc99 	bl	8000de0 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fc fc95 	bl	8000de0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e10c      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004670 <HAL_RCC_OscConfig+0x474>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2ea>
 80044d8:	4b64      	ldr	r3, [pc, #400]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	4a63      	ldr	r2, [pc, #396]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e4:	e01c      	b.n	8004520 <HAL_RCC_OscConfig+0x324>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x30c>
 80044ee:	4b5f      	ldr	r3, [pc, #380]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	4a5e      	ldr	r2, [pc, #376]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fa:	4b5c      	ldr	r3, [pc, #368]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a5b      	ldr	r2, [pc, #364]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0x324>
 8004508:	4b58      	ldr	r3, [pc, #352]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450c:	4a57      	ldr	r2, [pc, #348]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	@ 0x70
 8004514:	4b55      	ldr	r3, [pc, #340]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a54      	ldr	r2, [pc, #336]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0304 	bic.w	r3, r3, #4
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d015      	beq.n	8004554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fc5a 	bl	8000de0 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fc fc56 	bl	8000de0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0cb      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004546:	4b49      	ldr	r3, [pc, #292]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ee      	beq.n	8004530 <HAL_RCC_OscConfig+0x334>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fc fc44 	bl	8000de0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fc fc40 	bl	8000de0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0b5      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ee      	bne.n	800455c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	4b39      	ldr	r3, [pc, #228]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	4a38      	ldr	r2, [pc, #224]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a1 	beq.w	80046dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800459a:	4b34      	ldr	r3, [pc, #208]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d05c      	beq.n	8004660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d141      	bne.n	8004632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ae:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <HAL_RCC_OscConfig+0x478>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fc fc14 	bl	8000de0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc fc10 	bl	8000de0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e087      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	019b      	lsls	r3, r3, #6
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	3b01      	subs	r3, #1
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	491b      	ldr	r1, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <HAL_RCC_OscConfig+0x478>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fc fbe9 	bl	8000de0 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004612:	f7fc fbe5 	bl	8000de0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e05c      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x416>
 8004630:	e054      	b.n	80046dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_RCC_OscConfig+0x478>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fc fbd2 	bl	8000de0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fc fbce 	bl	8000de0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e045      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_RCC_OscConfig+0x470>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x444>
 800465e:	e03d      	b.n	80046dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e038      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
 8004674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d028      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d121      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d111      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cc      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b68      	ldr	r3, [pc, #416]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90c      	bls.n	8004728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b65      	ldr	r3, [pc, #404]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d119      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e067      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4934      	ldr	r1, [pc, #208]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fc fb00 	bl	8000de0 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fc fafc 	bl	8000de0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b25      	ldr	r3, [pc, #148]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fa60 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08008b3c 	.word	0x08008b3c
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b094      	sub	sp, #80	@ 0x50
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c4:	2300      	movs	r3, #0
 80048c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c8:	2300      	movs	r3, #0
 80048ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b79      	ldr	r3, [pc, #484]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80e1 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e0db      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b73      	ldr	r3, [pc, #460]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048f0:	e0db      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b73      	ldr	r3, [pc, #460]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80048f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048f6:	e0d8      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004902:	4b6d      	ldr	r3, [pc, #436]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d063      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004918:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
 8004922:	2300      	movs	r3, #0
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
 8004926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493c:	0150      	lsls	r0, r2, #5
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4621      	mov	r1, r4
 8004944:	1a51      	subs	r1, r2, r1
 8004946:	6139      	str	r1, [r7, #16]
 8004948:	4629      	mov	r1, r5
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800495c:	4659      	mov	r1, fp
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004966:	4651      	mov	r1, sl
 8004968:	018a      	lsls	r2, r1, #6
 800496a:	4651      	mov	r1, sl
 800496c:	ebb2 0801 	subs.w	r8, r2, r1
 8004970:	4659      	mov	r1, fp
 8004972:	eb63 0901 	sbc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	462b      	mov	r3, r5
 8004998:	eb49 0303 	adc.w	r3, r9, r3
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049aa:	4629      	mov	r1, r5
 80049ac:	024b      	lsls	r3, r1, #9
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049b4:	4621      	mov	r1, r4
 80049b6:	024a      	lsls	r2, r1, #9
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049be:	2200      	movs	r2, #0
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049c8:	f7fb fbfe 	bl	80001c8 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d4:	e058      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b38      	ldr	r3, [pc, #224]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	4611      	mov	r1, r2
 80049e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a02:	0150      	lsls	r0, r2, #5
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a28:	ebb2 040a 	subs.w	r4, r2, sl
 8004a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	00eb      	lsls	r3, r5, #3
 8004a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3e:	00e2      	lsls	r2, r4, #3
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	4643      	mov	r3, r8
 8004a46:	18e3      	adds	r3, r4, r3
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	eb45 0303 	adc.w	r3, r5, r3
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	028b      	lsls	r3, r1, #10
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a68:	4621      	mov	r1, r4
 8004a6a:	028a      	lsls	r2, r1, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	61fa      	str	r2, [r7, #28]
 8004a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7c:	f7fb fba4 	bl	80001c8 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3750      	adds	r7, #80	@ 0x50
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200

08004ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	@ (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08008b4c 	.word	0x08008b4c

08004b04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d035      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b2c:	4b62      	ldr	r3, [pc, #392]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b32:	f7fc f955 	bl	8000de0 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b3a:	f7fc f951 	bl	8000de0 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0b0      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	019a      	lsls	r2, r3, #6
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	4955      	ldr	r1, [pc, #340]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b6c:	4b52      	ldr	r3, [pc, #328]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b72:	f7fc f935 	bl	8000de0 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b7a:	f7fc f931 	bl	8000de0 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e090      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8083 	beq.w	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b44      	ldr	r3, [pc, #272]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4a43      	ldr	r2, [pc, #268]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb6:	4b41      	ldr	r3, [pc, #260]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bce:	f7fc f907 	bl	8000de0 <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bd6:	f7fc f903 	bl	8000de0 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e062      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004be8:	4b35      	ldr	r3, [pc, #212]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf4:	4b31      	ldr	r3, [pc, #196]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02f      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c12:	4b2a      	ldr	r3, [pc, #168]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1c:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c22:	4b28      	ldr	r3, [pc, #160]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c28:	4a24      	ldr	r2, [pc, #144]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c2e:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d114      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fc f8d1 	bl	8000de0 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fc f8cd 	bl	8000de0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e02a      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	4b18      	ldr	r3, [pc, #96]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ee      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c86:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
 8004c8c:	e005      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	4905      	ldr	r1, [pc, #20]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	42470068 	.word	0x42470068
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	42470e40 	.word	0x42470e40

08004cc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d13f      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ce6:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cfc:	d12f      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d00:	617b      	str	r3, [r7, #20]
          break;
 8004d02:	e02f      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d04:	4b1c      	ldr	r3, [pc, #112]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d10:	d108      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d12:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d1a:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e007      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d24:	4b14      	ldr	r3, [pc, #80]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2c:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d34:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4e:	0f1b      	lsrs	r3, r3, #28
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	617b      	str	r3, [r7, #20]
          break;
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
          break;
 8004d62:	bf00      	nop
        }
      }
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004d66:	bf00      	nop
    }
  }
  return frequency;
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	00bb8000 	.word	0x00bb8000
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	00f42400 	.word	0x00f42400

08004d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e07b      	b.n	8004e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004daa:	d009      	beq.n	8004dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
 8004db2:	e005      	b.n	8004dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fb fea0 	bl	8000b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	ea42 0103 	orr.w	r1, r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0104 	and.w	r1, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	f003 0210 	and.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	f107 001c 	add.w	r0, r7, #28
 8004ea8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d123      	bne.n	8004efc <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004edc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9dc 	bl	80052ae <USB_CoreReset>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e01b      	b.n	8004f34 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9d0 	bl	80052ae <USB_CoreReset>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f26:	e005      	b.n	8004f34 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f34:	7fbb      	ldrb	r3, [r7, #30]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10b      	bne.n	8004f52 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f043 0206 	orr.w	r2, r3, #6
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f5e:	b004      	add	sp, #16
 8004f60:	4770      	bx	lr

08004f62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f023 0201 	bic.w	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d115      	bne.n	8004ff4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fd4:	200a      	movs	r0, #10
 8004fd6:	f7fb ff0f 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	330a      	adds	r3, #10
 8004fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f956 	bl	8005292 <USB_GetMode>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d01e      	beq.n	800502a <USB_SetCurrentMode+0x84>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ff0:	d9f0      	bls.n	8004fd4 <USB_SetCurrentMode+0x2e>
 8004ff2:	e01a      	b.n	800502a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005006:	200a      	movs	r0, #10
 8005008:	f7fb fef6 	bl	8000df8 <HAL_Delay>
      ms += 10U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	330a      	adds	r3, #10
 8005010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f93d 	bl	8005292 <USB_GetMode>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <USB_SetCurrentMode+0x84>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2bc7      	cmp	r3, #199	@ 0xc7
 8005022:	d9f0      	bls.n	8005006 <USB_SetCurrentMode+0x60>
 8005024:	e001      	b.n	800502a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e005      	b.n	8005036 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2bc8      	cmp	r3, #200	@ 0xc8
 800502e:	d101      	bne.n	8005034 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005058:	d901      	bls.n	800505e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e01b      	b.n	8005096 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	daf2      	bge.n	800504c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005082:	d901      	bls.n	8005088 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e006      	b.n	8005096 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d0f0      	beq.n	8005076 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ba:	d901      	bls.n	80050c0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e018      	b.n	80050f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	daf2      	bge.n	80050ae <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2210      	movs	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050de:	d901      	bls.n	80050e4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e006      	b.n	80050f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d0f0      	beq.n	80050d2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050fe:	b480      	push	{r7}
 8005100:	b089      	sub	sp, #36	@ 0x24
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	4611      	mov	r1, r2
 800510a:	461a      	mov	r2, r3
 800510c:	460b      	mov	r3, r1
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	4613      	mov	r3, r2
 8005112:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800511c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d123      	bne.n	800516c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005124:	88bb      	ldrh	r3, [r7, #4]
 8005126:	3303      	adds	r3, #3
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e018      	b.n	8005164 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	031a      	lsls	r2, r3, #12
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513e:	461a      	mov	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	3301      	adds	r3, #1
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d3e2      	bcc.n	8005132 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	@ 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800517a:	b480      	push	{r7}
 800517c:	b08b      	sub	sp, #44	@ 0x2c
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	b29b      	uxth	r3, r3
 8005196:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	e014      	b.n	80051d0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	3301      	adds	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	3301      	adds	r3, #1
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	3301      	adds	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	3301      	adds	r3, #1
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3e6      	bcc.n	80051a6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051d8:	8bfb      	ldrh	r3, [r7, #30]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01e      	beq.n	800521c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e8:	461a      	mov	r2, r3
 80051ea:	f107 0310 	add.w	r3, r7, #16
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	701a      	strb	r2, [r3, #0]
      i++;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	3301      	adds	r3, #1
 8005208:	623b      	str	r3, [r7, #32]
      pDest++;
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	3301      	adds	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	3b01      	subs	r3, #1
 8005214:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ea      	bne.n	80051f2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800521e:	4618      	mov	r0, r3
 8005220:	372c      	adds	r7, #44	@ 0x2c
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4013      	ands	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005284:	68bb      	ldr	r3, [r7, #8]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0301 	and.w	r3, r3, #1
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052c6:	d901      	bls.n	80052cc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e01b      	b.n	8005304 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	daf2      	bge.n	80052ba <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f0:	d901      	bls.n	80052f6 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e006      	b.n	8005304 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d0f0      	beq.n	80052e4 <USB_CoreReset+0x36>

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005310:	b084      	sub	sp, #16
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800531e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005330:	461a      	mov	r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d119      	bne.n	800539a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10a      	bne.n	8005384 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e014      	b.n	80053ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005392:	f023 0304 	bic.w	r3, r3, #4
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e009      	b.n	80053ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ae:	2110      	movs	r1, #16
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff fe44 	bl	800503e <USB_FlushTxFifo>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fe6e 	bl	80050a2 <USB_FlushRxFifo>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	e015      	b.n	8005402 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e2:	461a      	mov	r2, r3
 80053e4:	f04f 33ff 	mov.w	r3, #4294967295
 80053e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f6:	461a      	mov	r2, r3
 80053f8:	2300      	movs	r3, #0
 80053fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005406:	461a      	mov	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4293      	cmp	r3, r2
 800540c:	d3e3      	bcc.n	80053d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <USB_HostInit+0x170>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10b      	bne.n	800543c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800542a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a15      	ldr	r2, [pc, #84]	@ (8005484 <USB_HostInit+0x174>)
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a14      	ldr	r2, [pc, #80]	@ (8005488 <USB_HostInit+0x178>)
 8005436:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800543a:	e009      	b.n	8005450 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2280      	movs	r2, #128	@ 0x80
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a11      	ldr	r2, [pc, #68]	@ (800548c <USB_HostInit+0x17c>)
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a11      	ldr	r2, [pc, #68]	@ (8005490 <USB_HostInit+0x180>)
 800544c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005450:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f043 0210 	orr.w	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <USB_HostInit+0x184>)
 800546a:	4313      	orrs	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	40040000 	.word	0x40040000
 8005484:	01000200 	.word	0x01000200
 8005488:	00e00300 	.word	0x00e00300
 800548c:	00600080 	.word	0x00600080
 8005490:	004000e0 	.word	0x004000e0
 8005494:	a3200008 	.word	0xa3200008

08005498 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054e0:	461a      	mov	r2, r3
 80054e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80054e6:	6053      	str	r3, [r2, #4]
 80054e8:	e00c      	b.n	8005504 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d107      	bne.n	8005500 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054f6:	461a      	mov	r2, r3
 80054f8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80054fc:	6053      	str	r3, [r2, #4]
 80054fe:	e001      	b.n	8005504 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005532:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800553c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005540:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005542:	2064      	movs	r0, #100	@ 0x64
 8005544:	f7fb fc58 	bl	8000df8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005554:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005556:	200a      	movs	r0, #10
 8005558:	f7fb fc4e 	bl	8000df8 <HAL_Delay>

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800558a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <USB_DriveVbus+0x44>
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d106      	bne.n	80055aa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055a8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b4:	d109      	bne.n	80055ca <USB_DriveVbus+0x64>
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	0c5b      	lsrs	r3, r3, #17
 80055f6:	f003 0303 	and.w	r3, r3, #3
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	b29b      	uxth	r3, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	70fb      	strb	r3, [r7, #3]
 800563a:	460b      	mov	r3, r1
 800563c:	70bb      	strb	r3, [r7, #2]
 800563e:	4613      	mov	r3, r2
 8005640:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005656:	461a      	mov	r2, r3
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800565e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005662:	2b03      	cmp	r3, #3
 8005664:	d87c      	bhi.n	8005760 <USB_HC_Init+0x138>
 8005666:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <USB_HC_Init+0x44>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	0800567d 	.word	0x0800567d
 8005670:	08005723 	.word	0x08005723
 8005674:	0800567d 	.word	0x0800567d
 8005678:	080056e5 	.word	0x080056e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005688:	461a      	mov	r2, r3
 800568a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800568e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005694:	2b00      	cmp	r3, #0
 8005696:	da10      	bge.n	80056ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80056b8:	e055      	b.n	8005766 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a6f      	ldr	r2, [pc, #444]	@ (800587c <USB_HC_Init+0x254>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d151      	bne.n	8005766 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056dc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80056e0:	60d3      	str	r3, [r2, #12]
      break;
 80056e2:	e040      	b.n	8005766 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f0:	461a      	mov	r2, r3
 80056f2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80056f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da34      	bge.n	800576a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	440a      	add	r2, r1
 8005716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800571a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005720:	e023      	b.n	800576a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	f240 2325 	movw	r3, #549	@ 0x225
 8005734:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005736:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da17      	bge.n	800576e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005758:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800575c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800575e:	e006      	b.n	800576e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77fb      	strb	r3, [r7, #31]
      break;
 8005764:	e004      	b.n	8005770 <USB_HC_Init+0x148>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <USB_HC_Init+0x148>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <USB_HC_Init+0x148>
      break;
 800576e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	440a      	add	r2, r1
 8005798:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	2101      	movs	r1, #1
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80057bc:	4313      	orrs	r3, r2
 80057be:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80057cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da03      	bge.n	80057dc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e001      	b.n	80057e0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fef9 	bl	80055d8 <USB_GetHostSpeed>
 80057e6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d106      	bne.n	80057fe <USB_HC_Init+0x1d6>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d003      	beq.n	80057fe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e001      	b.n	8005802 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005802:	787b      	ldrb	r3, [r7, #1]
 8005804:	059b      	lsls	r3, r3, #22
 8005806:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800580a:	78bb      	ldrb	r3, [r7, #2]
 800580c:	02db      	lsls	r3, r3, #11
 800580e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005812:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005814:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005818:	049b      	lsls	r3, r3, #18
 800581a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800581e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005820:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005822:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005826:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	431a      	orrs	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	440a      	add	r2, r1
 8005838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800583c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005840:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005842:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005846:	2b03      	cmp	r3, #3
 8005848:	d003      	beq.n	8005852 <USB_HC_Init+0x22a>
 800584a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d10f      	bne.n	8005872 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	440a      	add	r2, r1
 8005868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800586c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005870:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005872:	7ffb      	ldrb	r3, [r7, #31]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40040000 	.word	0x40040000

08005880 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08c      	sub	sp, #48	@ 0x30
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800589c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a18 <USB_HC_StartXfer+0x198>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d12f      	bne.n	8005906 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d11c      	bne.n	80058e6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	7c9b      	ldrb	r3, [r3, #18]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <USB_HC_StartXfer+0x3c>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	7c9b      	ldrb	r3, [r3, #18]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d124      	bne.n	8005906 <USB_HC_StartXfer+0x86>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	799b      	ldrb	r3, [r3, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d120      	bne.n	8005906 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60d3      	str	r3, [r2, #12]
 80058e4:	e00f      	b.n	8005906 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <USB_HC_StartXfer+0x86>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	795b      	ldrb	r3, [r3, #5]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d107      	bne.n	8005906 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	4619      	mov	r1, r3
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fb6b 	bl	8005fd8 <USB_DoPing>
        return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e232      	b.n	8005d6c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	799b      	ldrb	r3, [r3, #6]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d158      	bne.n	80059c0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800590e:	2301      	movs	r3, #1
 8005910:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	78db      	ldrb	r3, [r3, #3]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800591a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	8a92      	ldrh	r2, [r2, #20]
 8005920:	fb03 f202 	mul.w	r2, r3, r2
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	61da      	str	r2, [r3, #28]
 8005928:	e07c      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	7c9b      	ldrb	r3, [r3, #18]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d130      	bne.n	8005994 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	2bbc      	cmp	r3, #188	@ 0xbc
 8005938:	d918      	bls.n	800596c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	8a9b      	ldrh	r3, [r3, #20]
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d003      	beq.n	800595c <USB_HC_StartXfer+0xdc>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d103      	bne.n	8005964 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2202      	movs	r2, #2
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	e05f      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2201      	movs	r2, #1
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e05b      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d007      	beq.n	800598c <USB_HC_StartXfer+0x10c>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d003      	beq.n	800598c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2204      	movs	r2, #4
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e04b      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2203      	movs	r2, #3
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	e047      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10d      	bne.n	80059b6 <USB_HC_StartXfer+0x136>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	8a92      	ldrh	r2, [r2, #20]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d907      	bls.n	80059b6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	8a92      	ldrh	r2, [r2, #20]
 80059ac:	fb03 f202 	mul.w	r2, r3, r2
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61da      	str	r2, [r3, #28]
 80059b4:	e036      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61da      	str	r2, [r3, #28]
 80059be:	e031      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d018      	beq.n	80059fa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	8a92      	ldrh	r2, [r2, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	3b01      	subs	r3, #1
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	8a92      	ldrh	r2, [r2, #20]
 80059d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80059de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059e0:	8b7b      	ldrh	r3, [r7, #26]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90b      	bls.n	80059fe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80059e6:	8b7b      	ldrh	r3, [r7, #26]
 80059e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	8a92      	ldrh	r2, [r2, #20]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61da      	str	r2, [r3, #28]
 80059f8:	e001      	b.n	80059fe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80059fa:	2301      	movs	r3, #1
 80059fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	78db      	ldrb	r3, [r3, #3]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	8a92      	ldrh	r2, [r2, #20]
 8005a0c:	fb03 f202 	mul.w	r2, r3, r2
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61da      	str	r2, [r3, #28]
 8005a14:	e006      	b.n	8005a24 <USB_HC_StartXfer+0x1a4>
 8005a16:	bf00      	nop
 8005a18:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a2e:	04d9      	lsls	r1, r3, #19
 8005a30:	4ba3      	ldr	r3, [pc, #652]	@ (8005cc0 <USB_HC_StartXfer+0x440>)
 8005a32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	7d9b      	ldrb	r3, [r3, #22]
 8005a3a:	075b      	lsls	r3, r3, #29
 8005a3c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	6a39      	ldr	r1, [r7, #32]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a66:	460a      	mov	r2, r1
 8005a68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005aa0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	7e7b      	ldrb	r3, [r7, #25]
 8005ab2:	075b      	lsls	r3, r3, #29
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	0148      	lsls	r0, r1, #5
 8005ab8:	6a39      	ldr	r1, [r7, #32]
 8005aba:	4401      	add	r1, r0
 8005abc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	799b      	ldrb	r3, [r3, #6]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f040 80c3 	bne.w	8005c54 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	7c5b      	ldrb	r3, [r3, #17]
 8005ad2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	6a3a      	ldr	r2, [r7, #32]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005aea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	6a3a      	ldr	r2, [r7, #32]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	79db      	ldrb	r3, [r3, #7]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d123      	bne.n	8005b5c <USB_HC_StartXfer+0x2dc>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11f      	bne.n	8005b5c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	7c9b      	ldrb	r3, [r3, #18]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d003      	beq.n	8005b6c <USB_HC_StartXfer+0x2ec>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	7c9b      	ldrb	r3, [r3, #18]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d117      	bne.n	8005b9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d113      	bne.n	8005b9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	78db      	ldrb	r3, [r3, #3]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10f      	bne.n	8005b9c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	7c9b      	ldrb	r3, [r3, #18]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d162      	bne.n	8005c6a <USB_HC_StartXfer+0x3ea>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d15e      	bne.n	8005c6a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d858      	bhi.n	8005c68 <USB_HC_StartXfer+0x3e8>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <USB_HC_StartXfer+0x33c>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bef 	.word	0x08005bef
 8005bc4:	08005c11 	.word	0x08005c11
 8005bc8:	08005c33 	.word	0x08005c33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bea:	6053      	str	r3, [r2, #4]
          break;
 8005bec:	e03d      	b.n	8005c6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c08:	f043 030e 	orr.w	r3, r3, #14
 8005c0c:	6053      	str	r3, [r2, #4]
          break;
 8005c0e:	e02c      	b.n	8005c6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c2e:	6053      	str	r3, [r2, #4]
          break;
 8005c30:	e01b      	b.n	8005c6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c50:	6053      	str	r3, [r2, #4]
          break;
 8005c52:	e00a      	b.n	8005c6a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c60:	461a      	mov	r2, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	6053      	str	r3, [r2, #4]
 8005c66:	e000      	b.n	8005c6a <USB_HC_StartXfer+0x3ea>
          break;
 8005c68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	78db      	ldrb	r3, [r3, #3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e003      	b.n	8005c9c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ca2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e055      	b.n	8005d6c <USB_HC_StartXfer+0x4ec>
 8005cc0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	78db      	ldrb	r3, [r3, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d14e      	bne.n	8005d6a <USB_HC_StartXfer+0x4ea>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d04a      	beq.n	8005d6a <USB_HC_StartXfer+0x4ea>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	79db      	ldrb	r3, [r3, #7]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d146      	bne.n	8005d6a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	7c9b      	ldrb	r3, [r3, #18]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d831      	bhi.n	8005d48 <USB_HC_StartXfer+0x4c8>
 8005ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <USB_HC_StartXfer+0x46c>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005d21 	.word	0x08005d21
 8005cf4:	08005cfd 	.word	0x08005cfd
 8005cf8:	08005d21 	.word	0x08005d21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	3303      	adds	r3, #3
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d06:	8afa      	ldrh	r2, [r7, #22]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d91c      	bls.n	8005d4c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d1e:	e015      	b.n	8005d4c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	3303      	adds	r3, #3
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d2a:	8afa      	ldrh	r2, [r7, #22]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d90a      	bls.n	8005d50 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d46:	e003      	b.n	8005d50 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <USB_HC_StartXfer+0x4d2>
        break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <USB_HC_StartXfer+0x4d2>
        break;
 8005d50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785a      	ldrb	r2, [r3, #1]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2000      	movs	r0, #0
 8005d62:	9000      	str	r0, [sp, #0]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff f9ca 	bl	80050fe <USB_WritePacket>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	@ 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	b29b      	uxth	r3, r3
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b089      	sub	sp, #36	@ 0x24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0c9b      	lsrs	r3, r3, #18
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0fdb      	lsrs	r3, r3, #31
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	0fdb      	lsrs	r3, r3, #31
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d10d      	bne.n	8005e18 <USB_HC_Halt+0x82>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <USB_HC_Halt+0x82>
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d002      	beq.n	8005e14 <USB_HC_Halt+0x7e>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d101      	bne.n	8005e18 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e0d8      	b.n	8005fca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <USB_HC_Halt+0x8e>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d173      	bne.n	8005f0c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d14a      	bne.n	8005ee6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d133      	bne.n	8005ec4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e9a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ea8:	d82e      	bhi.n	8005f08 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec0:	d0ec      	beq.n	8005e9c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ec2:	e081      	b.n	8005fc8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ee2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ee4:	e070      	b.n	8005fc8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f04:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f06:	e05f      	b.n	8005fc8 <USB_HC_Halt+0x232>
            break;
 8005f08:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f0a:	e05d      	b.n	8005fc8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f2a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d133      	bne.n	8005fa4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f7a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f88:	d81d      	bhi.n	8005fc6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa0:	d0ec      	beq.n	8005f7c <USB_HC_Halt+0x1e6>
 8005fa2:	e011      	b.n	8005fc8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	e000      	b.n	8005fc8 <USB_HC_Halt+0x232>
          break;
 8005fc6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3724      	adds	r7, #36	@ 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005fec:	2301      	movs	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	04da      	lsls	r2, r3, #19
 8005ff4:	4b15      	ldr	r3, [pc, #84]	@ (800604c <USB_DoPing+0x74>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006008:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006020:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006028:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	1ff80000 	.word	0x1ff80000

08006050 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe ff8d 	bl	8004f84 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800606a:	2110      	movs	r1, #16
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fe ffe6 	bl	800503e <USB_FlushTxFifo>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff f810 	bl	80050a2 <USB_FlushRxFifo>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e01f      	b.n	80060d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c6:	461a      	mov	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3301      	adds	r3, #1
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b0f      	cmp	r3, #15
 80060d6:	d9dc      	bls.n	8006092 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060d8:	2300      	movs	r3, #0
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	e034      	b.n	8006148 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006104:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	461a      	mov	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006124:	d80c      	bhi.n	8006140 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613c:	d0ec      	beq.n	8006118 <USB_StopHost+0xc8>
 800613e:	e000      	b.n	8006142 <USB_StopHost+0xf2>
        break;
 8006140:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	3301      	adds	r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d9c7      	bls.n	80060de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006154:	461a      	mov	r2, r3
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f04f 32ff 	mov.w	r2, #4294967295
 8006162:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7fe fefc 	bl	8004f62 <USB_EnableGlobalInt>

  return ret;
 800616a:	7ffb      	ldrb	r3, [r7, #31]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b089      	sub	sp, #36	@ 0x24
 8006178:	af04      	add	r7, sp, #16
 800617a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800617c:	2301      	movs	r3, #1
 800617e:	2202      	movs	r2, #2
 8006180:	2102      	movs	r1, #2
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fc85 	bl	8006a92 <USBH_FindInterface>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2bff      	cmp	r3, #255	@ 0xff
 8006190:	d002      	beq.n	8006198 <USBH_CDC_InterfaceInit+0x24>
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d901      	bls.n	800619c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006198:	2302      	movs	r3, #2
 800619a:	e13d      	b.n	8006418 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fc5a 	bl	8006a5a <USBH_SelectInterface>
 80061a6:	4603      	mov	r3, r0
 80061a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80061b0:	2302      	movs	r3, #2
 80061b2:	e131      	b.n	8006418 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80061ba:	2050      	movs	r0, #80	@ 0x50
 80061bc:	f002 fb64 	bl	8008888 <malloc>
 80061c0:	4603      	mov	r3, r0
 80061c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80061d4:	2302      	movs	r3, #2
 80061d6:	e11f      	b.n	8006418 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80061d8:	2250      	movs	r2, #80	@ 0x50
 80061da:	2100      	movs	r1, #0
 80061dc:	68b8      	ldr	r0, [r7, #8]
 80061de:	f002 fc11 	bl	8008a04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	211a      	movs	r1, #26
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b25b      	sxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da15      	bge.n	8006226 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	211a      	movs	r1, #26
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	211a      	movs	r1, #26
 8006216:	fb01 f303 	mul.w	r3, r1, r3
 800621a:	4413      	add	r3, r2
 800621c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006220:	881a      	ldrh	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 ffbe 	bl	80081ae <USBH_AllocPipe>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	7819      	ldrb	r1, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7858      	ldrb	r0, [r3, #1]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	8952      	ldrh	r2, [r2, #10]
 8006252:	9202      	str	r2, [sp, #8]
 8006254:	2203      	movs	r2, #3
 8006256:	9201      	str	r2, [sp, #4]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	4623      	mov	r3, r4
 800625c:	4602      	mov	r2, r0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 ff76 	bl	8008150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fa85 	bl	800877c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006272:	2300      	movs	r3, #0
 8006274:	2200      	movs	r2, #0
 8006276:	210a      	movs	r1, #10
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc0a 	bl	8006a92 <USBH_FindInterface>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2bff      	cmp	r3, #255	@ 0xff
 8006286:	d002      	beq.n	800628e <USBH_CDC_InterfaceInit+0x11a>
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d901      	bls.n	8006292 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800628e:	2302      	movs	r3, #2
 8006290:	e0c2      	b.n	8006418 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	211a      	movs	r1, #26
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da16      	bge.n	80062d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	211a      	movs	r1, #26
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	211a      	movs	r1, #26
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	835a      	strh	r2, [r3, #26]
 80062d6:	e015      	b.n	8006304 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	211a      	movs	r1, #26
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	211a      	movs	r1, #26
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	211a      	movs	r1, #26
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	4413      	add	r3, r2
 8006310:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	b25b      	sxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	da16      	bge.n	800634a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	211a      	movs	r1, #26
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	4413      	add	r3, r2
 8006328:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	211a      	movs	r1, #26
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	4413      	add	r3, r2
 800633e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006342:	881a      	ldrh	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	835a      	strh	r2, [r3, #26]
 8006348:	e015      	b.n	8006376 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	211a      	movs	r1, #26
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	211a      	movs	r1, #26
 8006366:	fb01 f303 	mul.w	r3, r1, r3
 800636a:	4413      	add	r3, r2
 800636c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006370:	881a      	ldrh	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	7b9b      	ldrb	r3, [r3, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 ff16 	bl	80081ae <USBH_AllocPipe>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	7bdb      	ldrb	r3, [r3, #15]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 ff0c 	bl	80081ae <USBH_AllocPipe>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	7b59      	ldrb	r1, [r3, #13]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	7b98      	ldrb	r0, [r3, #14]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	8b12      	ldrh	r2, [r2, #24]
 80063b6:	9202      	str	r2, [sp, #8]
 80063b8:	2202      	movs	r2, #2
 80063ba:	9201      	str	r2, [sp, #4]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4623      	mov	r3, r4
 80063c0:	4602      	mov	r2, r0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fec4 	bl	8008150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	7b19      	ldrb	r1, [r3, #12]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	7bd8      	ldrb	r0, [r3, #15]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	8b52      	ldrh	r2, [r2, #26]
 80063e0:	9202      	str	r2, [sp, #8]
 80063e2:	2202      	movs	r2, #2
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	4623      	mov	r3, r4
 80063ea:	4602      	mov	r2, r0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 feaf 	bl	8008150 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	7b5b      	ldrb	r3, [r3, #13]
 80063fe:	2200      	movs	r2, #0
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 f9ba 	bl	800877c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	7b1b      	ldrb	r3, [r3, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 f9b3 	bl	800877c <USBH_LL_SetToggle>

  return USBH_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}

08006420 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fea4 	bl	800818e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fecf 	bl	80081f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	7b1b      	ldrb	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	7b1b      	ldrb	r3, [r3, #12]
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fe91 	bl	800818e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	7b1b      	ldrb	r3, [r3, #12]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 febc 	bl	80081f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	7b5b      	ldrb	r3, [r3, #13]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	7b5b      	ldrb	r3, [r3, #13]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fe7e 	bl	800818e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	7b5b      	ldrb	r3, [r3, #13]
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fea9 	bl	80081f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f002 f9ed 	bl	8008898 <free>
    phost->pActiveClass->pData = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064c4:	2200      	movs	r2, #0
 80064c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3340      	adds	r3, #64	@ 0x40
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8b1 	bl	8006652 <GetLineCoding>
 80064f0:	4603      	mov	r3, r0
 80064f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006500:	2102      	movs	r1, #2
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006506:	7afb      	ldrb	r3, [r7, #11]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006530:	2b04      	cmp	r3, #4
 8006532:	d877      	bhi.n	8006624 <USBH_CDC_Process+0x114>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <USBH_CDC_Process+0x2c>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006551 	.word	0x08006551
 8006540:	08006557 	.word	0x08006557
 8006544:	08006587 	.word	0x08006587
 8006548:	080065fb 	.word	0x080065fb
 800654c:	08006609 	.word	0x08006609
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e06d      	b.n	8006632 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f897 	bl	8006690 <SetLineCoding>
 8006562:	4603      	mov	r3, r0
 8006564:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006574:	e058      	b.n	8006628 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d055      	beq.n	8006628 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2204      	movs	r2, #4
 8006580:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006584:	e050      	b.n	8006628 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	3340      	adds	r3, #64	@ 0x40
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f860 	bl	8006652 <GetLineCoding>
 8006592:	4603      	mov	r3, r0
 8006594:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d126      	bne.n	80065ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ae:	791b      	ldrb	r3, [r3, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d13b      	bne.n	800662c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d133      	bne.n	800662c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d12b      	bne.n	800662c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065de:	429a      	cmp	r2, r3
 80065e0:	d124      	bne.n	800662c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f958 	bl	8006898 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065e8:	e020      	b.n	800662c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d01d      	beq.n	800662c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2204      	movs	r2, #4
 80065f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80065f8:	e018      	b.n	800662c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f867 	bl	80066ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8da 	bl	80067ba <CDC_ProcessReception>
      break;
 8006606:	e014      	b.n	8006632 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006608:	2100      	movs	r1, #0
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 f81a 	bl	8007644 <USBH_ClrFeature>
 8006610:	4603      	mov	r3, r0
 8006612:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006622:	e005      	b.n	8006630 <USBH_CDC_Process+0x120>

    default:
      break;
 8006624:	bf00      	nop
 8006626:	e004      	b.n	8006632 <USBH_CDC_Process+0x122>
      break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <USBH_CDC_Process+0x122>
      break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <USBH_CDC_Process+0x122>
      break;
 8006630:	bf00      	nop

  }

  return status;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22a1      	movs	r2, #161	@ 0xa1
 8006660:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2221      	movs	r2, #33	@ 0x21
 8006666:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2207      	movs	r2, #7
 8006678:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2207      	movs	r2, #7
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fb14 	bl	8007cae <USBH_CtlReq>
 8006686:	4603      	mov	r3, r0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2221      	movs	r2, #33	@ 0x21
 800669e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2207      	movs	r2, #7
 80066b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2207      	movs	r2, #7
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 faf5 	bl	8007cae <USBH_CtlReq>
 80066c4:	4603      	mov	r3, r0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af02      	add	r7, sp, #8
 80066d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d002      	beq.n	80066f4 <CDC_ProcessTransmission+0x26>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d023      	beq.n	800673a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80066f2:	e05e      	b.n	80067b2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	8b12      	ldrh	r2, [r2, #24]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d90b      	bls.n	8006718 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	69d9      	ldr	r1, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8b1a      	ldrh	r2, [r3, #24]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	7b5b      	ldrb	r3, [r3, #13]
 800670c:	2001      	movs	r0, #1
 800670e:	9000      	str	r0, [sp, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fcda 	bl	80080ca <USBH_BulkSendData>
 8006716:	e00b      	b.n	8006730 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	7b5b      	ldrb	r3, [r3, #13]
 8006726:	2001      	movs	r0, #1
 8006728:	9000      	str	r0, [sp, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 fccd 	bl	80080ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006738:	e03b      	b.n	80067b2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	7b5b      	ldrb	r3, [r3, #13]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fff1 	bl	8008728 <USBH_LL_GetURBState>
 8006746:	4603      	mov	r3, r0
 8006748:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d128      	bne.n	80067a2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	8b12      	ldrh	r2, [r2, #24]
 8006758:	4293      	cmp	r3, r2
 800675a:	d90e      	bls.n	800677a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	8b12      	ldrh	r2, [r2, #24]
 8006764:	1a9a      	subs	r2, r3, r2
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	8b12      	ldrh	r2, [r2, #24]
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]
 8006778:	e002      	b.n	8006780 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006790:	e00e      	b.n	80067b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f868 	bl	8006870 <USBH_CDC_TransmitCallback>
      break;
 80067a0:	e006      	b.n	80067b0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80067a2:	7afb      	ldrb	r3, [r7, #11]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d103      	bne.n	80067b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067b0:	bf00      	nop
  }
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d002      	beq.n	80067e0 <CDC_ProcessReception+0x26>
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d00e      	beq.n	80067fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80067de:	e043      	b.n	8006868 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	6a19      	ldr	r1, [r3, #32]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	8b5a      	ldrh	r2, [r3, #26]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	7b1b      	ldrb	r3, [r3, #12]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fc91 	bl	8008114 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2204      	movs	r2, #4
 80067f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80067fa:	e035      	b.n	8006868 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	7b1b      	ldrb	r3, [r3, #12]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 ff90 	bl	8008728 <USBH_LL_GetURBState>
 8006808:	4603      	mov	r3, r0
 800680a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d129      	bne.n	8006866 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	7b1b      	ldrb	r3, [r3, #12]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fef3 	bl	8008604 <USBH_LL_GetLastXferSize>
 800681e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d016      	beq.n	8006858 <CDC_ProcessReception+0x9e>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	8b5b      	ldrh	r3, [r3, #26]
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4293      	cmp	r3, r2
 8006834:	d910      	bls.n	8006858 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	441a      	add	r2, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2203      	movs	r2, #3
 8006852:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006856:	e006      	b.n	8006866 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f80f 	bl	8006884 <USBH_CDC_ReceiveCallback>
      break;
 8006866:	bf00      	nop
  }
}
 8006868:	bf00      	nop
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80068c0:	2302      	movs	r3, #2
 80068c2:	e029      	b.n	8006918 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	79fa      	ldrb	r2, [r7, #7]
 80068c8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f81f 	bl	8006920 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f001 fdc3 	bl	800849c <USBH_LL_Init>

  return USBH_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e009      	b.n	8006946 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	33e0      	adds	r3, #224	@ 0xe0
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d9f2      	bls.n	8006932 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e009      	b.n	8006966 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696c:	d3f1      	bcc.n	8006952 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2240      	movs	r2, #64	@ 0x40
 8006992:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	331c      	adds	r3, #28
 80069be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f002 f81d 	bl	8008a04 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069d4:	2100      	movs	r1, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f002 f814 	bl	8008a04 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80069e2:	2212      	movs	r2, #18
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 f80c 	bl	8008a04 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80069f2:	223e      	movs	r2, #62	@ 0x3e
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 f804 	bl	8008a04 <memset>

  return USBH_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10e      	bne.n	8006a42 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	33de      	adds	r3, #222	@ 0xde
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	e004      	b.n	8006a4c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a42:	2302      	movs	r3, #2
 8006a44:	73fb      	strb	r3, [r7, #15]
 8006a46:	e001      	b.n	8006a4c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d204      	bcs.n	8006a80 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006a7e:	e001      	b.n	8006a84 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	70fb      	strb	r3, [r7, #3]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70bb      	strb	r3, [r7, #2]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006aba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006abc:	e025      	b.n	8006b0a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	221a      	movs	r2, #26
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	3302      	adds	r3, #2
 8006ace:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	795b      	ldrb	r3, [r3, #5]
 8006ad4:	78fa      	ldrb	r2, [r7, #3]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d002      	beq.n	8006ae0 <USBH_FindInterface+0x4e>
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	2bff      	cmp	r3, #255	@ 0xff
 8006ade:	d111      	bne.n	8006b04 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ae4:	78ba      	ldrb	r2, [r7, #2]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d002      	beq.n	8006af0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	2bff      	cmp	r3, #255	@ 0xff
 8006aee:	d109      	bne.n	8006b04 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006af4:	787a      	ldrb	r2, [r7, #1]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d002      	beq.n	8006b00 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006afa:	787b      	ldrb	r3, [r7, #1]
 8006afc:	2bff      	cmp	r3, #255	@ 0xff
 8006afe:	d101      	bne.n	8006b04 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	e006      	b.n	8006b12 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	3301      	adds	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d9d6      	bls.n	8006abe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b10:	23ff      	movs	r3, #255	@ 0xff
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fcf4 	bl	8008514 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fe0d 	bl	800874e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af04      	add	r7, sp, #16
 8006b46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d102      	bne.n	8006b62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2203      	movs	r2, #3
 8006b60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b0b      	cmp	r3, #11
 8006b6a:	f200 81bb 	bhi.w	8006ee4 <USBH_Process+0x3a4>
 8006b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <USBH_Process+0x34>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006ba5 	.word	0x08006ba5
 8006b78:	08006bd7 	.word	0x08006bd7
 8006b7c:	08006c3f 	.word	0x08006c3f
 8006b80:	08006e7f 	.word	0x08006e7f
 8006b84:	08006ee5 	.word	0x08006ee5
 8006b88:	08006cdf 	.word	0x08006cdf
 8006b8c:	08006e25 	.word	0x08006e25
 8006b90:	08006d15 	.word	0x08006d15
 8006b94:	08006d35 	.word	0x08006d35
 8006b98:	08006d53 	.word	0x08006d53
 8006b9c:	08006d97 	.word	0x08006d97
 8006ba0:	08006e67 	.word	0x08006e67
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 819b 	beq.w	8006ee8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006bb8:	20c8      	movs	r0, #200	@ 0xc8
 8006bba:	f001 fe12 	bl	80087e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fd05 	bl	80085ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bd4:	e188      	b.n	8006ee8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d107      	bne.n	8006bf0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bee:	e18a      	b.n	8006f06 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006bf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bfa:	d914      	bls.n	8006c26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c02:	3301      	adds	r3, #1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d903      	bls.n	8006c1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	220d      	movs	r2, #13
 8006c1a:	701a      	strb	r2, [r3, #0]
      break;
 8006c1c:	e173      	b.n	8006f06 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
      break;
 8006c24:	e16f      	b.n	8006f06 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c2c:	f103 020a 	add.w	r2, r3, #10
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006c36:	200a      	movs	r0, #10
 8006c38:	f001 fdd3 	bl	80087e2 <USBH_Delay>
      break;
 8006c3c:	e163      	b.n	8006f06 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c4e:	2104      	movs	r1, #4
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c54:	2064      	movs	r0, #100	@ 0x64
 8006c56:	f001 fdc4 	bl	80087e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fc90 	bl	8008580 <USBH_LL_GetSpeed>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fa9b 	bl	80081ae <USBH_AllocPipe>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c80:	2180      	movs	r1, #128	@ 0x80
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fa93 	bl	80081ae <USBH_AllocPipe>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7919      	ldrb	r1, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9201      	str	r2, [sp, #4]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	2280      	movs	r2, #128	@ 0x80
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fa4d 	bl	8008150 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7959      	ldrb	r1, [r3, #5]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cca:	9202      	str	r2, [sp, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	9201      	str	r2, [sp, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fa3a 	bl	8008150 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cdc:	e113      	b.n	8006f06 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f916 	bl	8006f10 <USBH_HandleEnum>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 80fd 	bne.w	8006eec <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d103      	bne.n	8006d0c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2208      	movs	r2, #8
 8006d08:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d0a:	e0ef      	b.n	8006eec <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2207      	movs	r2, #7
 8006d10:	701a      	strb	r2, [r3, #0]
      break;
 8006d12:	e0eb      	b.n	8006eec <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80e8 	beq.w	8006ef0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d26:	2101      	movs	r1, #1
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2208      	movs	r2, #8
 8006d30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006d32:	e0dd      	b.n	8006ef0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc3a 	bl	80075b6 <USBH_SetCfg>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 80d5 	bne.w	8006ef4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2209      	movs	r2, #9
 8006d4e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d50:	e0d0      	b.n	8006ef4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fc4a 	bl	80075fc <USBH_SetFeature>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	220a      	movs	r2, #10
 8006d78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d7a:	e0bd      	b.n	8006ef8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	f040 80b9 	bne.w	8006ef8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	220a      	movs	r2, #10
 8006d8a:	701a      	strb	r2, [r3, #0]
      break;
 8006d8c:	e0b4      	b.n	8006ef8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	220a      	movs	r2, #10
 8006d92:	701a      	strb	r2, [r3, #0]
      break;
 8006d94:	e0b0      	b.n	8006ef8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80ad 	beq.w	8006efc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e016      	b.n	8006dde <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32de      	adds	r2, #222	@ 0xde
 8006db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dba:	791a      	ldrb	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d108      	bne.n	8006dd8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006dc6:	7bfa      	ldrb	r2, [r7, #15]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	32de      	adds	r2, #222	@ 0xde
 8006dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006dd6:	e005      	b.n	8006de4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0e5      	beq.n	8006db0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2206      	movs	r2, #6
 8006e04:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e12:	e073      	b.n	8006efc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	220d      	movs	r2, #13
 8006e18:	701a      	strb	r2, [r3, #0]
      break;
 8006e1a:	e06f      	b.n	8006efc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	220d      	movs	r2, #13
 8006e20:	701a      	strb	r2, [r3, #0]
      break;
 8006e22:	e06b      	b.n	8006efc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	220b      	movs	r2, #11
 8006e4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e4c:	e058      	b.n	8006f00 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d154      	bne.n	8006f00 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220d      	movs	r2, #13
 8006e5a:	701a      	strb	r2, [r3, #0]
      break;
 8006e5c:	e050      	b.n	8006f00 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	220d      	movs	r2, #13
 8006e62:	701a      	strb	r2, [r3, #0]
      break;
 8006e64:	e04c      	b.n	8006f00 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d049      	beq.n	8006f04 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      }
      break;
 8006e7c:	e042      	b.n	8006f04 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fd4a 	bl	8006920 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eba:	2105      	movs	r1, #5
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fe22 	bl	8006b1e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eda:	e014      	b.n	8006f06 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fb19 	bl	8008514 <USBH_LL_Start>
      break;
 8006ee2:	e010      	b.n	8006f06 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e00e      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006ee8:	bf00      	nop
 8006eea:	e00c      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006eec:	bf00      	nop
 8006eee:	e00a      	b.n	8006f06 <USBH_Process+0x3c6>
    break;
 8006ef0:	bf00      	nop
 8006ef2:	e008      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e006      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USBH_Process+0x3c6>
      break;
 8006f04:	bf00      	nop
  }
  return USBH_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af04      	add	r7, sp, #16
 8006f16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b07      	cmp	r3, #7
 8006f26:	f200 81bd 	bhi.w	80072a4 <USBH_HandleEnum+0x394>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <USBH_HandleEnum+0x20>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	0800700b 	.word	0x0800700b
 8006f38:	08007075 	.word	0x08007075
 8006f3c:	080070ff 	.word	0x080070ff
 8006f40:	08007169 	.word	0x08007169
 8006f44:	080071d9 	.word	0x080071d9
 8006f48:	0800721f 	.word	0x0800721f
 8006f4c:	08007265 	.word	0x08007265
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f50:	2108      	movs	r1, #8
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa4c 	bl	80073f0 <USBH_Get_DevDesc>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d12e      	bne.n	8006fc0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7919      	ldrb	r1, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	9201      	str	r2, [sp, #4]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2280      	movs	r2, #128	@ 0x80
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f8dc 	bl	8008150 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7959      	ldrb	r1, [r3, #5]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fac:	9202      	str	r2, [sp, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 f8c9 	bl	8008150 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fbe:	e173      	b.n	80072a8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	f040 8170 	bne.w	80072a8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fce:	3301      	adds	r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d903      	bls.n	8006fea <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	220d      	movs	r2, #13
 8006fe6:	701a      	strb	r2, [r3, #0]
      break;
 8006fe8:	e15e      	b.n	80072a8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	795b      	ldrb	r3, [r3, #5]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 f8fd 	bl	80081f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	791b      	ldrb	r3, [r3, #4]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 f8f7 	bl	80081f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e14e      	b.n	80072a8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800700a:	2112      	movs	r1, #18
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f9ef 	bl	80073f0 <USBH_Get_DevDesc>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d103      	bne.n	8007024 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007022:	e143      	b.n	80072ac <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b03      	cmp	r3, #3
 8007028:	f040 8140 	bne.w	80072ac <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007032:	3301      	adds	r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007042:	2b03      	cmp	r3, #3
 8007044:	d903      	bls.n	800704e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	220d      	movs	r2, #13
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e12e      	b.n	80072ac <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	795b      	ldrb	r3, [r3, #5]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f8cb 	bl	80081f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f8c5 	bl	80081f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
      break;
 8007072:	e11b      	b.n	80072ac <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007074:	2101      	movs	r1, #1
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa79 	bl	800756e <USBH_SetAddress>
 800707c:	4603      	mov	r3, r0
 800707e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d130      	bne.n	80070e8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007086:	2002      	movs	r0, #2
 8007088:	f001 fbab 	bl	80087e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2203      	movs	r2, #3
 8007098:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7919      	ldrb	r1, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070ae:	9202      	str	r2, [sp, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	9201      	str	r2, [sp, #4]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4603      	mov	r3, r0
 80070b8:	2280      	movs	r2, #128	@ 0x80
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f848 	bl	8008150 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7959      	ldrb	r1, [r3, #5]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	9201      	str	r2, [sp, #4]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4603      	mov	r3, r0
 80070de:	2200      	movs	r2, #0
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f835 	bl	8008150 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070e6:	e0e3      	b.n	80072b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	f040 80e0 	bne.w	80072b0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	220d      	movs	r2, #13
 80070f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	705a      	strb	r2, [r3, #1]
      break;
 80070fc:	e0d8      	b.n	80072b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070fe:	2109      	movs	r1, #9
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9a1 	bl	8007448 <USBH_Get_CfgDesc>
 8007106:	4603      	mov	r3, r0
 8007108:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007116:	e0cd      	b.n	80072b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b03      	cmp	r3, #3
 800711c:	f040 80ca 	bne.w	80072b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007136:	2b03      	cmp	r3, #3
 8007138:	d903      	bls.n	8007142 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220d      	movs	r2, #13
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e0b8      	b.n	80072b4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f851 	bl	80081f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	791b      	ldrb	r3, [r3, #4]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f84b 	bl	80081f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
      break;
 8007166:	e0a5      	b.n	80072b4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f969 	bl	8007448 <USBH_Get_CfgDesc>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2205      	movs	r2, #5
 8007184:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007186:	e097      	b.n	80072b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b03      	cmp	r3, #3
 800718c:	f040 8094 	bne.w	80072b8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007196:	3301      	adds	r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d903      	bls.n	80071b2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220d      	movs	r2, #13
 80071ae:	701a      	strb	r2, [r3, #0]
      break;
 80071b0:	e082      	b.n	80072b8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	795b      	ldrb	r3, [r3, #5]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f819 	bl	80081f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f813 	bl	80081f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
      break;
 80071d6:	e06f      	b.n	80072b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d019      	beq.n	8007216 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ee:	23ff      	movs	r3, #255	@ 0xff
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f953 	bl	800749c <USBH_Get_StringDesc>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2206      	movs	r2, #6
 8007204:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007206:	e059      	b.n	80072bc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d156      	bne.n	80072bc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2206      	movs	r2, #6
 8007212:	705a      	strb	r2, [r3, #1]
      break;
 8007214:	e052      	b.n	80072bc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2206      	movs	r2, #6
 800721a:	705a      	strb	r2, [r3, #1]
      break;
 800721c:	e04e      	b.n	80072bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007224:	2b00      	cmp	r3, #0
 8007226:	d019      	beq.n	800725c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007234:	23ff      	movs	r3, #255	@ 0xff
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f930 	bl	800749c <USBH_Get_StringDesc>
 800723c:	4603      	mov	r3, r0
 800723e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2207      	movs	r2, #7
 800724a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800724c:	e038      	b.n	80072c0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d135      	bne.n	80072c0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2207      	movs	r2, #7
 8007258:	705a      	strb	r2, [r3, #1]
      break;
 800725a:	e031      	b.n	80072c0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2207      	movs	r2, #7
 8007260:	705a      	strb	r2, [r3, #1]
      break;
 8007262:	e02d      	b.n	80072c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800727a:	23ff      	movs	r3, #255	@ 0xff
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f90d 	bl	800749c <USBH_Get_StringDesc>
 8007282:	4603      	mov	r3, r0
 8007284:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007290:	e018      	b.n	80072c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d115      	bne.n	80072c4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
      break;
 800729c:	e012      	b.n	80072c4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
      break;
 80072a2:	e00f      	b.n	80072c4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80072a4:	bf00      	nop
 80072a6:	e00e      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072a8:	bf00      	nop
 80072aa:	e00c      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072ac:	bf00      	nop
 80072ae:	e00a      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072b0:	bf00      	nop
 80072b2:	e008      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072b4:	bf00      	nop
 80072b6:	e006      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072b8:	bf00      	nop
 80072ba:	e004      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <USBH_HandleEnum+0x3b6>
      break;
 80072c4:	bf00      	nop
  }
  return Status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f804 	bl	8007312 <USBH_HandleSof>
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b0b      	cmp	r3, #11
 8007322:	d10a      	bne.n	800733a <USBH_HandleSof+0x28>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
  }
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007352:	bf00      	nop
}
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800736e:	bf00      	nop
}
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 f8be 	bl	800854a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 ff0b 	bl	80081f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	795b      	ldrb	r3, [r3, #5]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ff05 	bl	80081f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80073fc:	887b      	ldrh	r3, [r7, #2]
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007402:	d901      	bls.n	8007408 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007404:	2303      	movs	r3, #3
 8007406:	e01b      	b.n	8007440 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800740e:	887b      	ldrh	r3, [r7, #2]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4613      	mov	r3, r2
 8007414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f872 	bl	8007504 <USBH_GetDescriptor>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007430:	887a      	ldrh	r2, [r7, #2]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f929 	bl	800768c <USBH_ParseDevDesc>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	331c      	adds	r3, #28
 8007458:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800745a:	887b      	ldrh	r3, [r7, #2]
 800745c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007460:	d901      	bls.n	8007466 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007462:	2303      	movs	r3, #3
 8007464:	e016      	b.n	8007494 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007466:	887b      	ldrh	r3, [r7, #2]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f846 	bl	8007504 <USBH_GetDescriptor>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d107      	bne.n	8007492 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007482:	887b      	ldrh	r3, [r7, #2]
 8007484:	461a      	mov	r2, r3
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9af 	bl	80077ec <USBH_ParseCfgDesc>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	461a      	mov	r2, r3
 80074a8:	460b      	mov	r3, r1
 80074aa:	72fb      	strb	r3, [r7, #11]
 80074ac:	4613      	mov	r3, r2
 80074ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80074b0:	893b      	ldrh	r3, [r7, #8]
 80074b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b6:	d802      	bhi.n	80074be <USBH_Get_StringDesc+0x22>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074be:	2303      	movs	r3, #3
 80074c0:	e01c      	b.n	80074fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80074c2:	7afb      	ldrb	r3, [r7, #11]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80074ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	460b      	mov	r3, r1
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f812 	bl	8007504 <USBH_GetDescriptor>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074f0:	893a      	ldrh	r2, [r7, #8]
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fb8d 	bl	8007c14 <USBH_ParseStringDesc>
  }

  return status;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	72fb      	strb	r3, [r7, #11]
 8007512:	4613      	mov	r3, r2
 8007514:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	789b      	ldrb	r3, [r3, #2]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d11c      	bne.n	8007558 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007524:	b2da      	uxtb	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2206      	movs	r2, #6
 800752e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	893a      	ldrh	r2, [r7, #8]
 8007534:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007536:	893b      	ldrh	r3, [r7, #8]
 8007538:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800753c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007540:	d104      	bne.n	800754c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f240 4209 	movw	r2, #1033	@ 0x409
 8007548:	829a      	strh	r2, [r3, #20]
 800754a:	e002      	b.n	8007552 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8b3a      	ldrh	r2, [r7, #24]
 8007556:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007558:	8b3b      	ldrh	r3, [r7, #24]
 800755a:	461a      	mov	r2, r3
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fba5 	bl	8007cae <USBH_CtlReq>
 8007564:	4603      	mov	r3, r0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	789b      	ldrb	r3, [r3, #2]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10f      	bne.n	80075a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2205      	movs	r2, #5
 800758c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb81 	bl	8007cae <USBH_CtlReq>
 80075ac:	4603      	mov	r3, r0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10e      	bne.n	80075e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2209      	movs	r2, #9
 80075d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075e8:	2200      	movs	r2, #0
 80075ea:	2100      	movs	r1, #0
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fb5e 	bl	8007cae <USBH_CtlReq>
 80075f2:	4603      	mov	r3, r0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	789b      	ldrb	r3, [r3, #2]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d10f      	bne.n	8007630 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb3a 	bl	8007cae <USBH_CtlReq>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10f      	bne.n	8007678 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fb16 	bl	8007cae <USBH_CtlReq>
 8007682:	4603      	mov	r3, r0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80076ac:	2302      	movs	r3, #2
 80076ae:	e094      	b.n	80077da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	785a      	ldrb	r2, [r3, #1]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	3302      	adds	r3, #2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3303      	adds	r3, #3
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	791a      	ldrb	r2, [r3, #4]
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	795a      	ldrb	r2, [r3, #5]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	799a      	ldrb	r2, [r3, #6]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	79da      	ldrb	r2, [r3, #7]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800770a:	2b01      	cmp	r3, #1
 800770c:	d11b      	bne.n	8007746 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	79db      	ldrb	r3, [r3, #7]
 8007712:	2b20      	cmp	r3, #32
 8007714:	dc0f      	bgt.n	8007736 <USBH_ParseDevDesc+0xaa>
 8007716:	2b08      	cmp	r3, #8
 8007718:	db0f      	blt.n	800773a <USBH_ParseDevDesc+0xae>
 800771a:	3b08      	subs	r3, #8
 800771c:	4a32      	ldr	r2, [pc, #200]	@ (80077e8 <USBH_ParseDevDesc+0x15c>)
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	bf14      	ite	ne
 800772a:	2301      	movne	r3, #1
 800772c:	2300      	moveq	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <USBH_ParseDevDesc+0xb6>
 8007734:	e001      	b.n	800773a <USBH_ParseDevDesc+0xae>
 8007736:	2b40      	cmp	r3, #64	@ 0x40
 8007738:	d003      	beq.n	8007742 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2208      	movs	r2, #8
 800773e:	71da      	strb	r2, [r3, #7]
        break;
 8007740:	e000      	b.n	8007744 <USBH_ParseDevDesc+0xb8>
        break;
 8007742:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007744:	e00e      	b.n	8007764 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800774c:	2b02      	cmp	r3, #2
 800774e:	d107      	bne.n	8007760 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	79db      	ldrb	r3, [r3, #7]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d005      	beq.n	8007764 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2208      	movs	r2, #8
 800775c:	71da      	strb	r2, [r3, #7]
 800775e:	e001      	b.n	8007764 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007760:	2303      	movs	r3, #3
 8007762:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	2b08      	cmp	r3, #8
 8007768:	d936      	bls.n	80077d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3308      	adds	r3, #8
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3309      	adds	r3, #9
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	b29b      	uxth	r3, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	b29a      	uxth	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	330a      	adds	r3, #10
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	330b      	adds	r3, #11
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	b29b      	uxth	r3, r3
 8007796:	4313      	orrs	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	330c      	adds	r3, #12
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	330d      	adds	r3, #13
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	7b9a      	ldrb	r2, [r3, #14]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	7bda      	ldrb	r2, [r3, #15]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	7c1a      	ldrb	r2, [r3, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	7c5a      	ldrb	r2, [r3, #17]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	01000101 	.word	0x01000101

080077ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	@ 0x30
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007800:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800781a:	2302      	movs	r3, #2
 800781c:	e0da      	b.n	80079d4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	785a      	ldrb	r2, [r3, #1]
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3302      	adds	r3, #2
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3303      	adds	r3, #3
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	b29b      	uxth	r3, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784c:	bf28      	it	cs
 800784e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007852:	b29a      	uxth	r2, r3
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	791a      	ldrb	r2, [r3, #4]
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	795a      	ldrb	r2, [r3, #5]
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	799a      	ldrb	r2, [r3, #6]
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	79da      	ldrb	r2, [r3, #7]
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	7a1a      	ldrb	r2, [r3, #8]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b09      	cmp	r3, #9
 8007886:	d002      	beq.n	800788e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	2209      	movs	r2, #9
 800788c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	2b09      	cmp	r3, #9
 8007892:	f240 809d 	bls.w	80079d0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007896:	2309      	movs	r3, #9
 8007898:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800789e:	e081      	b.n	80079a4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078a0:	f107 0316 	add.w	r3, r7, #22
 80078a4:	4619      	mov	r1, r3
 80078a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a8:	f000 f9e7 	bl	8007c7a <USBH_GetNextDesc>
 80078ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d176      	bne.n	80079a4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	d002      	beq.n	80078c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	2209      	movs	r2, #9
 80078c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c8:	221a      	movs	r2, #26
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	3308      	adds	r3, #8
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	4413      	add	r3, r2
 80078d4:	3302      	adds	r3, #2
 80078d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078da:	69f8      	ldr	r0, [r7, #28]
 80078dc:	f000 f87e 	bl	80079dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ea:	e043      	b.n	8007974 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078ec:	f107 0316 	add.w	r3, r7, #22
 80078f0:	4619      	mov	r1, r3
 80078f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f4:	f000 f9c1 	bl	8007c7a <USBH_GetNextDesc>
 80078f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d138      	bne.n	8007974 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	795b      	ldrb	r3, [r3, #5]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d113      	bne.n	8007932 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800790e:	2b02      	cmp	r3, #2
 8007910:	d003      	beq.n	800791a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	799b      	ldrb	r3, [r3, #6]
 8007916:	2b03      	cmp	r3, #3
 8007918:	d10b      	bne.n	8007932 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	79db      	ldrb	r3, [r3, #7]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <USBH_ParseCfgDesc+0x14e>
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b09      	cmp	r3, #9
 8007928:	d007      	beq.n	800793a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	2209      	movs	r2, #9
 800792e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007930:	e003      	b.n	800793a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	2207      	movs	r2, #7
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	e000      	b.n	800793c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800793a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007940:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007944:	3201      	adds	r2, #1
 8007946:	00d2      	lsls	r2, r2, #3
 8007948:	211a      	movs	r1, #26
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	4413      	add	r3, r2
 8007950:	3308      	adds	r3, #8
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	4413      	add	r3, r2
 8007956:	3304      	adds	r3, #4
 8007958:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800795a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f870 	bl	8007a44 <USBH_ParseEPDesc>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800796a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800796e:	3301      	adds	r3, #1
 8007970:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	791b      	ldrb	r3, [r3, #4]
 8007978:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800797c:	429a      	cmp	r2, r3
 800797e:	d204      	bcs.n	800798a <USBH_ParseCfgDesc+0x19e>
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	885a      	ldrh	r2, [r3, #2]
 8007984:	8afb      	ldrh	r3, [r7, #22]
 8007986:	429a      	cmp	r2, r3
 8007988:	d8b0      	bhi.n	80078ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007992:	429a      	cmp	r2, r3
 8007994:	d201      	bcs.n	800799a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007996:	2303      	movs	r3, #3
 8007998:	e01c      	b.n	80079d4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800799a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800799e:	3301      	adds	r3, #1
 80079a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d805      	bhi.n	80079b8 <USBH_ParseCfgDesc+0x1cc>
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	885a      	ldrh	r2, [r3, #2]
 80079b0:	8afb      	ldrh	r3, [r7, #22]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	f63f af74 	bhi.w	80078a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	791b      	ldrb	r3, [r3, #4]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	bf28      	it	cs
 80079c0:	2302      	movcs	r3, #2
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d201      	bcs.n	80079d0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e001      	b.n	80079d4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80079d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3730      	adds	r7, #48	@ 0x30
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	785a      	ldrb	r2, [r3, #1]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	789a      	ldrb	r2, [r3, #2]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	78da      	ldrb	r2, [r3, #3]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	bf28      	it	cs
 8007a10:	2302      	movcs	r3, #2
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	795a      	ldrb	r2, [r3, #5]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	799a      	ldrb	r2, [r3, #6]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	79da      	ldrb	r2, [r3, #7]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	7a1a      	ldrb	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	721a      	strb	r2, [r3, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	785a      	ldrb	r2, [r3, #1]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	789a      	ldrb	r2, [r3, #2]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	78da      	ldrb	r2, [r3, #3]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3305      	adds	r3, #5
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4313      	orrs	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	799a      	ldrb	r2, [r3, #6]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	889b      	ldrh	r3, [r3, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa6:	d804      	bhi.n	8007ab2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab0:	d901      	bls.n	8007ab6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d136      	bne.n	8007b2e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	78db      	ldrb	r3, [r3, #3]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d108      	bne.n	8007ade <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	889b      	ldrh	r3, [r3, #4]
 8007ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad4:	f240 8097 	bls.w	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	75fb      	strb	r3, [r7, #23]
 8007adc:	e093      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d107      	bne.n	8007afa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	2b40      	cmp	r3, #64	@ 0x40
 8007af0:	f240 8089 	bls.w	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007af4:	2303      	movs	r3, #3
 8007af6:	75fb      	strb	r3, [r7, #23]
 8007af8:	e085      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	78db      	ldrb	r3, [r3, #3]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d005      	beq.n	8007b12 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d10a      	bne.n	8007b28 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	799b      	ldrb	r3, [r3, #6]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <USBH_ParseEPDesc+0xde>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	799b      	ldrb	r3, [r3, #6]
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	d970      	bls.n	8007c04 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007b22:	2303      	movs	r3, #3
 8007b24:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b26:	e06d      	b.n	8007c04 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	75fb      	strb	r3, [r7, #23]
 8007b2c:	e06b      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d13c      	bne.n	8007bb2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d005      	beq.n	8007b50 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	78db      	ldrb	r3, [r3, #3]
 8007b48:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	889b      	ldrh	r3, [r3, #4]
 8007b54:	2b40      	cmp	r3, #64	@ 0x40
 8007b56:	d956      	bls.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b5c:	e053      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10e      	bne.n	8007b88 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	799b      	ldrb	r3, [r3, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	d803      	bhi.n	8007b82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007b7e:	2b40      	cmp	r3, #64	@ 0x40
 8007b80:	d941      	bls.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b82:	2303      	movs	r3, #3
 8007b84:	75fb      	strb	r3, [r7, #23]
 8007b86:	e03e      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	78db      	ldrb	r3, [r3, #3]
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d10b      	bne.n	8007bac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	799b      	ldrb	r3, [r3, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <USBH_ParseEPDesc+0x162>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	889b      	ldrh	r3, [r3, #4]
 8007ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba4:	d32f      	bcc.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	75fb      	strb	r3, [r7, #23]
 8007baa:	e02c      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bac:	2303      	movs	r3, #3
 8007bae:	75fb      	strb	r3, [r7, #23]
 8007bb0:	e029      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d120      	bne.n	8007bfe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	78db      	ldrb	r3, [r3, #3]
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	889b      	ldrh	r3, [r3, #4]
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d01a      	beq.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	75fb      	strb	r3, [r7, #23]
 8007bd4:	e017      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d10a      	bne.n	8007bf8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	799b      	ldrb	r3, [r3, #6]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <USBH_ParseEPDesc+0x1ae>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d909      	bls.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	75fb      	strb	r3, [r7, #23]
 8007bf6:	e006      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	75fb      	strb	r3, [r7, #23]
 8007bfc:	e003      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	75fb      	strb	r3, [r7, #23]
 8007c02:	e000      	b.n	8007c06 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c04:	bf00      	nop
  }

  return status;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d120      	bne.n	8007c6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	1e9a      	subs	r2, r3, #2
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	bf28      	it	cs
 8007c38:	4613      	movcs	r3, r2
 8007c3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c42:	2300      	movs	r3, #0
 8007c44:	82fb      	strh	r3, [r7, #22]
 8007c46:	e00b      	b.n	8007c60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c48:	8afb      	ldrh	r3, [r7, #22]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c5a:	8afb      	ldrh	r3, [r7, #22]
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	82fb      	strh	r3, [r7, #22]
 8007c60:	8afa      	ldrh	r2, [r7, #22]
 8007c62:	8abb      	ldrh	r3, [r7, #20]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d3ef      	bcc.n	8007c48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7812      	ldrb	r2, [r2, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	789b      	ldrb	r3, [r3, #2]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d002      	beq.n	8007cce <USBH_CtlReq+0x20>
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d00f      	beq.n	8007cec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ccc:	e027      	b.n	8007d1e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cea:	e018      	b.n	8007d1e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f81b 	bl	8007d28 <USBH_HandleControl>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <USBH_CtlReq+0x54>
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d106      	bne.n	8007d10 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	761a      	strb	r2, [r3, #24]
      break;
 8007d0e:	e005      	b.n	8007d1c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d102      	bne.n	8007d1c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	709a      	strb	r2, [r3, #2]
      break;
 8007d1c:	bf00      	nop
  }
  return status;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	7e1b      	ldrb	r3, [r3, #24]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	2b0a      	cmp	r3, #10
 8007d40:	f200 8156 	bhi.w	8007ff0 <USBH_HandleControl+0x2c8>
 8007d44:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <USBH_HandleControl+0x24>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	08007d93 	.word	0x08007d93
 8007d54:	08007dfd 	.word	0x08007dfd
 8007d58:	08007e23 	.word	0x08007e23
 8007d5c:	08007e5b 	.word	0x08007e5b
 8007d60:	08007e85 	.word	0x08007e85
 8007d64:	08007ed7 	.word	0x08007ed7
 8007d68:	08007ef9 	.word	0x08007ef9
 8007d6c:	08007f35 	.word	0x08007f35
 8007d70:	08007f5b 	.word	0x08007f5b
 8007d74:	08007f99 	.word	0x08007f99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f103 0110 	add.w	r1, r3, #16
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	795b      	ldrb	r3, [r3, #5]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f943 	bl	8008010 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	761a      	strb	r2, [r3, #24]
      break;
 8007d90:	e139      	b.n	8008006 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	795b      	ldrb	r3, [r3, #5]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fcc5 	bl	8008728 <USBH_LL_GetURBState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d11e      	bne.n	8007de6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7c1b      	ldrb	r3, [r3, #16]
 8007dac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007db0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8adb      	ldrh	r3, [r3, #22]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007dba:	7b7b      	ldrb	r3, [r7, #13]
 8007dbc:	2b80      	cmp	r3, #128	@ 0x80
 8007dbe:	d103      	bne.n	8007dc8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dc6:	e115      	b.n	8007ff4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2205      	movs	r2, #5
 8007dcc:	761a      	strb	r2, [r3, #24]
      break;
 8007dce:	e111      	b.n	8007ff4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007dd0:	7b7b      	ldrb	r3, [r7, #13]
 8007dd2:	2b80      	cmp	r3, #128	@ 0x80
 8007dd4:	d103      	bne.n	8007dde <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2209      	movs	r2, #9
 8007dda:	761a      	strb	r2, [r3, #24]
      break;
 8007ddc:	e10a      	b.n	8007ff4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2207      	movs	r2, #7
 8007de2:	761a      	strb	r2, [r3, #24]
      break;
 8007de4:	e106      	b.n	8007ff4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d003      	beq.n	8007df4 <USBH_HandleControl+0xcc>
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	f040 8100 	bne.w	8007ff4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	220b      	movs	r2, #11
 8007df8:	761a      	strb	r2, [r3, #24]
      break;
 8007dfa:	e0fb      	b.n	8007ff4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6899      	ldr	r1, [r3, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	899a      	ldrh	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f93a 	bl	800808e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2204      	movs	r2, #4
 8007e1e:	761a      	strb	r2, [r3, #24]
      break;
 8007e20:	e0f1      	b.n	8008006 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc7d 	bl	8008728 <USBH_LL_GetURBState>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d102      	bne.n	8007e3e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2209      	movs	r2, #9
 8007e3c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d102      	bne.n	8007e4a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e44:	2303      	movs	r3, #3
 8007e46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e48:	e0d6      	b.n	8007ff8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	f040 80d3 	bne.w	8007ff8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	220b      	movs	r2, #11
 8007e56:	761a      	strb	r2, [r3, #24]
      break;
 8007e58:	e0ce      	b.n	8007ff8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6899      	ldr	r1, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	899a      	ldrh	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	2001      	movs	r0, #1
 8007e68:	9000      	str	r0, [sp, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f8ea 	bl	8008044 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2206      	movs	r2, #6
 8007e80:	761a      	strb	r2, [r3, #24]
      break;
 8007e82:	e0c0      	b.n	8008006 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	795b      	ldrb	r3, [r3, #5]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fc4c 	bl	8008728 <USBH_LL_GetURBState>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d103      	bne.n	8007ea2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2207      	movs	r2, #7
 8007e9e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ea0:	e0ac      	b.n	8007ffc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d105      	bne.n	8007eb4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	220c      	movs	r2, #12
 8007eac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb2:	e0a3      	b.n	8007ffc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d103      	bne.n	8007ec2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2205      	movs	r2, #5
 8007ebe:	761a      	strb	r2, [r3, #24]
      break;
 8007ec0:	e09c      	b.n	8007ffc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	f040 8099 	bne.w	8007ffc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	220b      	movs	r2, #11
 8007ece:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed4:	e092      	b.n	8007ffc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8d5 	bl	800808e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	761a      	strb	r2, [r3, #24]

      break;
 8007ef6:	e086      	b.n	8008006 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fc12 	bl	8008728 <USBH_LL_GetURBState>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d105      	bne.n	8007f1a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	220d      	movs	r2, #13
 8007f12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f18:	e072      	b.n	8008000 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d103      	bne.n	8007f28 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	220b      	movs	r2, #11
 8007f24:	761a      	strb	r2, [r3, #24]
      break;
 8007f26:	e06b      	b.n	8008000 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d168      	bne.n	8008000 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	73fb      	strb	r3, [r7, #15]
      break;
 8007f32:	e065      	b.n	8008000 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	795b      	ldrb	r3, [r3, #5]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	9200      	str	r2, [sp, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2100      	movs	r1, #0
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f87f 	bl	8008044 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	220a      	movs	r2, #10
 8007f56:	761a      	strb	r2, [r3, #24]
      break;
 8007f58:	e055      	b.n	8008006 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	795b      	ldrb	r3, [r3, #5]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbe1 	bl	8008728 <USBH_LL_GetURBState>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d105      	bne.n	8007f7c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	220d      	movs	r2, #13
 8007f78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7a:	e043      	b.n	8008004 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d103      	bne.n	8007f8a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2209      	movs	r2, #9
 8007f86:	761a      	strb	r2, [r3, #24]
      break;
 8007f88:	e03c      	b.n	8008004 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d139      	bne.n	8008004 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	220b      	movs	r2, #11
 8007f94:	761a      	strb	r2, [r3, #24]
      break;
 8007f96:	e035      	b.n	8008004 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	7e5b      	ldrb	r3, [r3, #25]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	765a      	strb	r2, [r3, #25]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7e5b      	ldrb	r3, [r3, #25]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d806      	bhi.n	8007fba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fb8:	e025      	b.n	8008006 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc0:	2106      	movs	r1, #6
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	795b      	ldrb	r3, [r3, #5]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f90c 	bl	80081f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	791b      	ldrb	r3, [r3, #4]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f906 	bl	80081f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fea:	2302      	movs	r3, #2
 8007fec:	73fb      	strb	r3, [r7, #15]
      break;
 8007fee:	e00a      	b.n	8008006 <USBH_HandleControl+0x2de>

    default:
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e008      	b.n	8008006 <USBH_HandleControl+0x2de>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e006      	b.n	8008006 <USBH_HandleControl+0x2de>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e004      	b.n	8008006 <USBH_HandleControl+0x2de>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e002      	b.n	8008006 <USBH_HandleControl+0x2de>
      break;
 8008000:	bf00      	nop
 8008002:	e000      	b.n	8008006 <USBH_HandleControl+0x2de>
      break;
 8008004:	bf00      	nop
  }

  return status;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af04      	add	r7, sp, #16
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800801e:	79f9      	ldrb	r1, [r7, #7]
 8008020:	2300      	movs	r3, #0
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	2308      	movs	r3, #8
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	2300      	movs	r3, #0
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fb46 	bl	80086c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af04      	add	r7, sp, #16
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	460b      	mov	r3, r1
 8008054:	80fb      	strh	r3, [r7, #6]
 8008056:	4613      	mov	r3, r2
 8008058:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008068:	7979      	ldrb	r1, [r7, #5]
 800806a:	7e3b      	ldrb	r3, [r7, #24]
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	2301      	movs	r3, #1
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fb21 	bl	80086c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b088      	sub	sp, #32
 8008092:	af04      	add	r7, sp, #16
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	4611      	mov	r1, r2
 800809a:	461a      	mov	r2, r3
 800809c:	460b      	mov	r3, r1
 800809e:	80fb      	strh	r3, [r7, #6]
 80080a0:	4613      	mov	r3, r2
 80080a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080a4:	7979      	ldrb	r1, [r7, #5]
 80080a6:	2300      	movs	r3, #0
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2301      	movs	r3, #1
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	2201      	movs	r2, #1
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fb03 	bl	80086c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080c0:	2300      	movs	r3, #0

}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af04      	add	r7, sp, #16
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4611      	mov	r1, r2
 80080d6:	461a      	mov	r2, r3
 80080d8:	460b      	mov	r3, r1
 80080da:	80fb      	strh	r3, [r7, #6]
 80080dc:	4613      	mov	r3, r2
 80080de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ee:	7979      	ldrb	r1, [r7, #5]
 80080f0:	7e3b      	ldrb	r3, [r7, #24]
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	2301      	movs	r3, #1
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2302      	movs	r3, #2
 8008102:	2200      	movs	r2, #0
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fade 	bl	80086c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af04      	add	r7, sp, #16
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	460b      	mov	r3, r1
 8008124:	80fb      	strh	r3, [r7, #6]
 8008126:	4613      	mov	r3, r2
 8008128:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800812a:	7979      	ldrb	r1, [r7, #5]
 800812c:	2300      	movs	r3, #0
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	2301      	movs	r3, #1
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	2302      	movs	r3, #2
 800813e:	2201      	movs	r2, #1
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fac0 	bl	80086c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af04      	add	r7, sp, #16
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	461a      	mov	r2, r3
 800815e:	4603      	mov	r3, r0
 8008160:	70fb      	strb	r3, [r7, #3]
 8008162:	460b      	mov	r3, r1
 8008164:	70bb      	strb	r3, [r7, #2]
 8008166:	4613      	mov	r3, r2
 8008168:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800816a:	7878      	ldrb	r0, [r7, #1]
 800816c:	78ba      	ldrb	r2, [r7, #2]
 800816e:	78f9      	ldrb	r1, [r7, #3]
 8008170:	8b3b      	ldrh	r3, [r7, #24]
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	7d3b      	ldrb	r3, [r7, #20]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	7c3b      	ldrb	r3, [r7, #16]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4603      	mov	r3, r0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa53 	bl	800862a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa72 	bl	8008688 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f836 	bl	800822c <USBH_GetFreePipe>
 80081c0:	4603      	mov	r3, r0
 80081c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00a      	beq.n	80081e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	33e0      	adds	r3, #224	@ 0xe0
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	b2db      	uxtb	r3, r3
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d80d      	bhi.n	800821e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	33e0      	adds	r3, #224	@ 0xe0
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008214:	6879      	ldr	r1, [r7, #4]
 8008216:	33e0      	adds	r3, #224	@ 0xe0
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e00f      	b.n	800825e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	33e0      	adds	r3, #224	@ 0xe0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	b29b      	uxth	r3, r3
 8008256:	e007      	b.n	8008268 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	3301      	adds	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	2b0f      	cmp	r3, #15
 8008262:	d9ec      	bls.n	800823e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008264:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008278:	2201      	movs	r2, #1
 800827a:	490e      	ldr	r1, [pc, #56]	@ (80082b4 <MX_USB_HOST_Init+0x40>)
 800827c:	480e      	ldr	r0, [pc, #56]	@ (80082b8 <MX_USB_HOST_Init+0x44>)
 800827e:	f7fe fb15 	bl	80068ac <USBH_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008288:	f7f8 fb54 	bl	8000934 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800828c:	490b      	ldr	r1, [pc, #44]	@ (80082bc <MX_USB_HOST_Init+0x48>)
 800828e:	480a      	ldr	r0, [pc, #40]	@ (80082b8 <MX_USB_HOST_Init+0x44>)
 8008290:	f7fe fbb9 	bl	8006a06 <USBH_RegisterClass>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800829a:	f7f8 fb4b 	bl	8000934 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800829e:	4806      	ldr	r0, [pc, #24]	@ (80082b8 <MX_USB_HOST_Init+0x44>)
 80082a0:	f7fe fc3d 	bl	8006b1e <USBH_Start>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082aa:	f7f8 fb43 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082ae:	bf00      	nop
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	20000194 	.word	0x20000194
 80082bc:	2000000c 	.word	0x2000000c

080082c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082c4:	4802      	ldr	r0, [pc, #8]	@ (80082d0 <MX_USB_HOST_Process+0x10>)
 80082c6:	f7fe fc3b 	bl	8006b40 <USBH_Process>
}
 80082ca:	bf00      	nop
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000194 	.word	0x20000194

080082d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d819      	bhi.n	800831c <USBH_UserProcess+0x48>
 80082e8:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <USBH_UserProcess+0x1c>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	0800831d 	.word	0x0800831d
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	08008315 	.word	0x08008315
 8008300:	08008305 	.word	0x08008305
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008304:	4b09      	ldr	r3, [pc, #36]	@ (800832c <USBH_UserProcess+0x58>)
 8008306:	2203      	movs	r2, #3
 8008308:	701a      	strb	r2, [r3, #0]
  break;
 800830a:	e008      	b.n	800831e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <USBH_UserProcess+0x58>)
 800830e:	2202      	movs	r2, #2
 8008310:	701a      	strb	r2, [r3, #0]
  break;
 8008312:	e004      	b.n	800831e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008314:	4b05      	ldr	r3, [pc, #20]	@ (800832c <USBH_UserProcess+0x58>)
 8008316:	2201      	movs	r2, #1
 8008318:	701a      	strb	r2, [r3, #0]
  break;
 800831a:	e000      	b.n	800831e <USBH_UserProcess+0x4a>

  default:
  break;
 800831c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	2000056c 	.word	0x2000056c

08008330 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	@ 0x28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008338:	f107 0314 	add.w	r3, r7, #20
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	60da      	str	r2, [r3, #12]
 8008346:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008350:	d147      	bne.n	80083e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008352:	2300      	movs	r3, #0
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	4b25      	ldr	r3, [pc, #148]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835a:	4a24      	ldr	r2, [pc, #144]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	6313      	str	r3, [r2, #48]	@ 0x30
 8008362:	4b22      	ldr	r3, [pc, #136]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800836e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008374:	2300      	movs	r3, #0
 8008376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008378:	2300      	movs	r3, #0
 800837a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	4619      	mov	r1, r3
 8008382:	481b      	ldr	r0, [pc, #108]	@ (80083f0 <HAL_HCD_MspInit+0xc0>)
 8008384:	f7f8 fe6e 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008388:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800838c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838e:	2302      	movs	r3, #2
 8008390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008396:	2300      	movs	r3, #0
 8008398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800839a:	230a      	movs	r3, #10
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4619      	mov	r1, r3
 80083a4:	4812      	ldr	r0, [pc, #72]	@ (80083f0 <HAL_HCD_MspInit+0xc0>)
 80083a6:	f7f8 fe5d 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083aa:	4b10      	ldr	r3, [pc, #64]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 80083ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ae:	4a0f      	ldr	r2, [pc, #60]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 80083b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 80083bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083be:	4a0b      	ldr	r2, [pc, #44]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 80083c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80083c6:	4b09      	ldr	r3, [pc, #36]	@ (80083ec <HAL_HCD_MspInit+0xbc>)
 80083c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083d2:	2200      	movs	r2, #0
 80083d4:	2100      	movs	r1, #0
 80083d6:	2043      	movs	r0, #67	@ 0x43
 80083d8:	f7f8 fe0d 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083dc:	2043      	movs	r0, #67	@ 0x43
 80083de:	f7f8 fe26 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083e2:	bf00      	nop
 80083e4:	3728      	adds	r7, #40	@ 0x28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40023800 	.word	0x40023800
 80083f0:	40020000 	.word	0x40020000

080083f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe ff73 	bl	80072ee <USBH_LL_IncTimer>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe ffab 	bl	800737a <USBH_LL_Connect>
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe ffb4 	bl	80073a8 <USBH_LL_Disconnect>
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
 8008454:	4613      	mov	r3, r2
 8008456:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe ff65 	bl	8007342 <USBH_LL_PortEnabled>
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe ff65 	bl	800735e <USBH_LL_PortDisabled>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d12a      	bne.n	8008504 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084ae:	4a18      	ldr	r2, [pc, #96]	@ (8008510 <USBH_LL_Init+0x74>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a15      	ldr	r2, [pc, #84]	@ (8008510 <USBH_LL_Init+0x74>)
 80084ba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084be:	4b14      	ldr	r3, [pc, #80]	@ (8008510 <USBH_LL_Init+0x74>)
 80084c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084c6:	4b12      	ldr	r3, [pc, #72]	@ (8008510 <USBH_LL_Init+0x74>)
 80084c8:	2208      	movs	r2, #8
 80084ca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084cc:	4b10      	ldr	r3, [pc, #64]	@ (8008510 <USBH_LL_Init+0x74>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008510 <USBH_LL_Init+0x74>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008510 <USBH_LL_Init+0x74>)
 80084da:	2202      	movs	r2, #2
 80084dc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084de:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <USBH_LL_Init+0x74>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084e4:	480a      	ldr	r0, [pc, #40]	@ (8008510 <USBH_LL_Init+0x74>)
 80084e6:	f7f8 ff8b 	bl	8001400 <HAL_HCD_Init>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084f0:	f7f8 fa20 	bl	8000934 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084f4:	4806      	ldr	r0, [pc, #24]	@ (8008510 <USBH_LL_Init+0x74>)
 80084f6:	f7f9 fbeb 	bl	8001cd0 <HAL_HCD_GetCurrentFrame>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fe fee6 	bl	80072d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000570 	.word	0x20000570

08008514 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 fb58 	bl	8001be0 <HAL_HCD_Start>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f95e 	bl	80087f8 <USBH_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008560:	4618      	mov	r0, r3
 8008562:	f7f9 fb60 	bl	8001c26 <HAL_HCD_Stop>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f943 	bl	80087f8 <USBH_Get_USB_Status>
 8008572:	4603      	mov	r3, r0
 8008574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008576:	7bbb      	ldrb	r3, [r7, #14]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008588:	2301      	movs	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008592:	4618      	mov	r0, r3
 8008594:	f7f9 fbaa 	bl	8001cec <HAL_HCD_GetCurrentSpeed>
 8008598:	4603      	mov	r3, r0
 800859a:	2b02      	cmp	r3, #2
 800859c:	d00c      	beq.n	80085b8 <USBH_LL_GetSpeed+0x38>
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d80d      	bhi.n	80085be <USBH_LL_GetSpeed+0x3e>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <USBH_LL_GetSpeed+0x2c>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d003      	beq.n	80085b2 <USBH_LL_GetSpeed+0x32>
 80085aa:	e008      	b.n	80085be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
    break;
 80085b0:	e008      	b.n	80085c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085b2:	2301      	movs	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
    break;
 80085b6:	e005      	b.n	80085c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085b8:	2302      	movs	r3, #2
 80085ba:	73fb      	strb	r3, [r7, #15]
    break;
 80085bc:	e002      	b.n	80085c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085be:	2301      	movs	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
    break;
 80085c2:	bf00      	nop
  }
  return  speed;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7f9 fb3b 	bl	8001c60 <HAL_HCD_ResetPort>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f901 	bl	80087f8 <USBH_Get_USB_Status>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7f9 fb43 	bl	8001ca6 <HAL_HCD_HC_GetXferCount>
 8008620:	4603      	mov	r3, r0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800862a:	b590      	push	{r4, r7, lr}
 800862c:	b089      	sub	sp, #36	@ 0x24
 800862e:	af04      	add	r7, sp, #16
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	461a      	mov	r2, r3
 8008638:	4603      	mov	r3, r0
 800863a:	70fb      	strb	r3, [r7, #3]
 800863c:	460b      	mov	r3, r1
 800863e:	70bb      	strb	r3, [r7, #2]
 8008640:	4613      	mov	r3, r2
 8008642:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008652:	787c      	ldrb	r4, [r7, #1]
 8008654:	78ba      	ldrb	r2, [r7, #2]
 8008656:	78f9      	ldrb	r1, [r7, #3]
 8008658:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4623      	mov	r3, r4
 800866a:	f7f8 ff30 	bl	80014ce <HAL_HCD_HC_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f8bf 	bl	80087f8 <USBH_Get_USB_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}

08008688 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f8 ffc9 	bl	800163e <HAL_HCD_HC_Halt>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 f8a0 	bl	80087f8 <USBH_Get_USB_Status>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086c6:	b590      	push	{r4, r7, lr}
 80086c8:	b089      	sub	sp, #36	@ 0x24
 80086ca:	af04      	add	r7, sp, #16
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	461a      	mov	r2, r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	70fb      	strb	r3, [r7, #3]
 80086d8:	460b      	mov	r3, r1
 80086da:	70bb      	strb	r3, [r7, #2]
 80086dc:	4613      	mov	r3, r2
 80086de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086ee:	787c      	ldrb	r4, [r7, #1]
 80086f0:	78ba      	ldrb	r2, [r7, #2]
 80086f2:	78f9      	ldrb	r1, [r7, #3]
 80086f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086fc:	9302      	str	r3, [sp, #8]
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4623      	mov	r3, r4
 800870a:	f7f8 ffbb 	bl	8001684 <HAL_HCD_HC_SubmitRequest>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f86f 	bl	80087f8 <USBH_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7f9 fa9c 	bl	8001c7c <HAL_HCD_HC_GetURBState>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008760:	2b01      	cmp	r3, #1
 8008762:	d103      	bne.n	800876c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f872 	bl	8008850 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800876c:	20c8      	movs	r0, #200	@ 0xc8
 800876e:	f7f8 fb43 	bl	8000df8 <HAL_Delay>
  return USBH_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
 8008788:	4613      	mov	r3, r2
 800878a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008792:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	68f9      	ldr	r1, [r7, #12]
 8008798:	4613      	mov	r3, r2
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	3317      	adds	r3, #23
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	68f9      	ldr	r1, [r7, #12]
 80087ae:	4613      	mov	r3, r2
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	333c      	adds	r3, #60	@ 0x3c
 80087ba:	78ba      	ldrb	r2, [r7, #2]
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e009      	b.n	80087d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	4613      	mov	r3, r2
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	333d      	adds	r3, #61	@ 0x3d
 80087d0:	78ba      	ldrb	r2, [r7, #2]
 80087d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f8 fb04 	bl	8000df8 <HAL_Delay>
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	2b03      	cmp	r3, #3
 800880a:	d817      	bhi.n	800883c <USBH_Get_USB_Status+0x44>
 800880c:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <USBH_Get_USB_Status+0x1c>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008825 	.word	0x08008825
 8008818:	0800882b 	.word	0x0800882b
 800881c:	08008831 	.word	0x08008831
 8008820:	08008837 	.word	0x08008837
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	e00b      	b.n	8008842 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	73fb      	strb	r3, [r7, #15]
    break;
 800882e:	e008      	b.n	8008842 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	e005      	b.n	8008842 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008836:	2302      	movs	r3, #2
 8008838:	73fb      	strb	r3, [r7, #15]
    break;
 800883a:	e002      	b.n	8008842 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800883c:	2302      	movs	r3, #2
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	bf00      	nop
  }
  return usb_status;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
 8008868:	e001      	b.n	800886e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	461a      	mov	r2, r3
 8008872:	2101      	movs	r1, #1
 8008874:	4803      	ldr	r0, [pc, #12]	@ (8008884 <MX_DriverVbusFS+0x34>)
 8008876:	f7f8 fd91 	bl	800139c <HAL_GPIO_WritePin>
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	40020800 	.word	0x40020800

08008888 <malloc>:
 8008888:	4b02      	ldr	r3, [pc, #8]	@ (8008894 <malloc+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f000 b82d 	b.w	80088ec <_malloc_r>
 8008892:	bf00      	nop
 8008894:	2000002c 	.word	0x2000002c

08008898 <free>:
 8008898:	4b02      	ldr	r3, [pc, #8]	@ (80088a4 <free+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f000 b8f5 	b.w	8008a8c <_free_r>
 80088a2:	bf00      	nop
 80088a4:	2000002c 	.word	0x2000002c

080088a8 <sbrk_aligned>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0f      	ldr	r6, [pc, #60]	@ (80088e8 <sbrk_aligned+0x40>)
 80088ac:	460c      	mov	r4, r1
 80088ae:	6831      	ldr	r1, [r6, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	b911      	cbnz	r1, 80088ba <sbrk_aligned+0x12>
 80088b4:	f000 f8ae 	bl	8008a14 <_sbrk_r>
 80088b8:	6030      	str	r0, [r6, #0]
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 f8a9 	bl	8008a14 <_sbrk_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d103      	bne.n	80088ce <sbrk_aligned+0x26>
 80088c6:	f04f 34ff 	mov.w	r4, #4294967295
 80088ca:	4620      	mov	r0, r4
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d0f8      	beq.n	80088ca <sbrk_aligned+0x22>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f89a 	bl	8008a14 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d1f2      	bne.n	80088ca <sbrk_aligned+0x22>
 80088e4:	e7ef      	b.n	80088c6 <sbrk_aligned+0x1e>
 80088e6:	bf00      	nop
 80088e8:	20000950 	.word	0x20000950

080088ec <_malloc_r>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	1ccd      	adds	r5, r1, #3
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	2d00      	cmp	r5, #0
 8008900:	4606      	mov	r6, r0
 8008902:	db01      	blt.n	8008908 <_malloc_r+0x1c>
 8008904:	42a9      	cmp	r1, r5
 8008906:	d904      	bls.n	8008912 <_malloc_r+0x26>
 8008908:	230c      	movs	r3, #12
 800890a:	6033      	str	r3, [r6, #0]
 800890c:	2000      	movs	r0, #0
 800890e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089e8 <_malloc_r+0xfc>
 8008916:	f000 f869 	bl	80089ec <__malloc_lock>
 800891a:	f8d8 3000 	ldr.w	r3, [r8]
 800891e:	461c      	mov	r4, r3
 8008920:	bb44      	cbnz	r4, 8008974 <_malloc_r+0x88>
 8008922:	4629      	mov	r1, r5
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff ffbf 	bl	80088a8 <sbrk_aligned>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	4604      	mov	r4, r0
 800892e:	d158      	bne.n	80089e2 <_malloc_r+0xf6>
 8008930:	f8d8 4000 	ldr.w	r4, [r8]
 8008934:	4627      	mov	r7, r4
 8008936:	2f00      	cmp	r7, #0
 8008938:	d143      	bne.n	80089c2 <_malloc_r+0xd6>
 800893a:	2c00      	cmp	r4, #0
 800893c:	d04b      	beq.n	80089d6 <_malloc_r+0xea>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4639      	mov	r1, r7
 8008942:	4630      	mov	r0, r6
 8008944:	eb04 0903 	add.w	r9, r4, r3
 8008948:	f000 f864 	bl	8008a14 <_sbrk_r>
 800894c:	4581      	cmp	r9, r0
 800894e:	d142      	bne.n	80089d6 <_malloc_r+0xea>
 8008950:	6821      	ldr	r1, [r4, #0]
 8008952:	1a6d      	subs	r5, r5, r1
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffa6 	bl	80088a8 <sbrk_aligned>
 800895c:	3001      	adds	r0, #1
 800895e:	d03a      	beq.n	80089d6 <_malloc_r+0xea>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	442b      	add	r3, r5
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	f8d8 3000 	ldr.w	r3, [r8]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	bb62      	cbnz	r2, 80089c8 <_malloc_r+0xdc>
 800896e:	f8c8 7000 	str.w	r7, [r8]
 8008972:	e00f      	b.n	8008994 <_malloc_r+0xa8>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	1b52      	subs	r2, r2, r5
 8008978:	d420      	bmi.n	80089bc <_malloc_r+0xd0>
 800897a:	2a0b      	cmp	r2, #11
 800897c:	d917      	bls.n	80089ae <_malloc_r+0xc2>
 800897e:	1961      	adds	r1, r4, r5
 8008980:	42a3      	cmp	r3, r4
 8008982:	6025      	str	r5, [r4, #0]
 8008984:	bf18      	it	ne
 8008986:	6059      	strne	r1, [r3, #4]
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	bf08      	it	eq
 800898c:	f8c8 1000 	streq.w	r1, [r8]
 8008990:	5162      	str	r2, [r4, r5]
 8008992:	604b      	str	r3, [r1, #4]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f82f 	bl	80089f8 <__malloc_unlock>
 800899a:	f104 000b 	add.w	r0, r4, #11
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	f020 0007 	bic.w	r0, r0, #7
 80089a4:	1ac2      	subs	r2, r0, r3
 80089a6:	bf1c      	itt	ne
 80089a8:	1a1b      	subne	r3, r3, r0
 80089aa:	50a3      	strne	r3, [r4, r2]
 80089ac:	e7af      	b.n	800890e <_malloc_r+0x22>
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	bf0c      	ite	eq
 80089b4:	f8c8 2000 	streq.w	r2, [r8]
 80089b8:	605a      	strne	r2, [r3, #4]
 80089ba:	e7eb      	b.n	8008994 <_malloc_r+0xa8>
 80089bc:	4623      	mov	r3, r4
 80089be:	6864      	ldr	r4, [r4, #4]
 80089c0:	e7ae      	b.n	8008920 <_malloc_r+0x34>
 80089c2:	463c      	mov	r4, r7
 80089c4:	687f      	ldr	r7, [r7, #4]
 80089c6:	e7b6      	b.n	8008936 <_malloc_r+0x4a>
 80089c8:	461a      	mov	r2, r3
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d1fb      	bne.n	80089c8 <_malloc_r+0xdc>
 80089d0:	2300      	movs	r3, #0
 80089d2:	6053      	str	r3, [r2, #4]
 80089d4:	e7de      	b.n	8008994 <_malloc_r+0xa8>
 80089d6:	230c      	movs	r3, #12
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f80c 	bl	80089f8 <__malloc_unlock>
 80089e0:	e794      	b.n	800890c <_malloc_r+0x20>
 80089e2:	6005      	str	r5, [r0, #0]
 80089e4:	e7d6      	b.n	8008994 <_malloc_r+0xa8>
 80089e6:	bf00      	nop
 80089e8:	20000954 	.word	0x20000954

080089ec <__malloc_lock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	@ (80089f4 <__malloc_lock+0x8>)
 80089ee:	f000 b84b 	b.w	8008a88 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000a94 	.word	0x20000a94

080089f8 <__malloc_unlock>:
 80089f8:	4801      	ldr	r0, [pc, #4]	@ (8008a00 <__malloc_unlock+0x8>)
 80089fa:	f000 b846 	b.w	8008a8a <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000a94 	.word	0x20000a94

08008a04 <memset>:
 8008a04:	4402      	add	r2, r0
 8008a06:	4603      	mov	r3, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d100      	bne.n	8008a0e <memset+0xa>
 8008a0c:	4770      	bx	lr
 8008a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a12:	e7f9      	b.n	8008a08 <memset+0x4>

08008a14 <_sbrk_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d06      	ldr	r5, [pc, #24]	@ (8008a30 <_sbrk_r+0x1c>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	f7f8 f906 	bl	8000c30 <_sbrk>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_sbrk_r+0x1a>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_sbrk_r+0x1a>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20000a90 	.word	0x20000a90

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	@ (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	2000002c 	.word	0x2000002c

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4d0d      	ldr	r5, [pc, #52]	@ (8008a78 <__libc_init_array+0x38>)
 8008a44:	4c0d      	ldr	r4, [pc, #52]	@ (8008a7c <__libc_init_array+0x3c>)
 8008a46:	1b64      	subs	r4, r4, r5
 8008a48:	10a4      	asrs	r4, r4, #2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	4d0b      	ldr	r5, [pc, #44]	@ (8008a80 <__libc_init_array+0x40>)
 8008a52:	4c0c      	ldr	r4, [pc, #48]	@ (8008a84 <__libc_init_array+0x44>)
 8008a54:	f000 f864 	bl	8008b20 <_init>
 8008a58:	1b64      	subs	r4, r4, r5
 8008a5a:	10a4      	asrs	r4, r4, #2
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	08008b5c 	.word	0x08008b5c
 8008a7c:	08008b5c 	.word	0x08008b5c
 8008a80:	08008b5c 	.word	0x08008b5c
 8008a84:	08008b60 	.word	0x08008b60

08008a88 <__retarget_lock_acquire_recursive>:
 8008a88:	4770      	bx	lr

08008a8a <__retarget_lock_release_recursive>:
 8008a8a:	4770      	bx	lr

08008a8c <_free_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4605      	mov	r5, r0
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d041      	beq.n	8008b18 <_free_r+0x8c>
 8008a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a98:	1f0c      	subs	r4, r1, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bfb8      	it	lt
 8008a9e:	18e4      	addlt	r4, r4, r3
 8008aa0:	f7ff ffa4 	bl	80089ec <__malloc_lock>
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b1c <_free_r+0x90>)
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	b933      	cbnz	r3, 8008ab8 <_free_r+0x2c>
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	6014      	str	r4, [r2, #0]
 8008aae:	4628      	mov	r0, r5
 8008ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ab4:	f7ff bfa0 	b.w	80089f8 <__malloc_unlock>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d908      	bls.n	8008ace <_free_r+0x42>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	1821      	adds	r1, r4, r0
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf01      	itttt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	1809      	addeq	r1, r1, r0
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	e7ed      	b.n	8008aaa <_free_r+0x1e>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	b10b      	cbz	r3, 8008ad8 <_free_r+0x4c>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d9fa      	bls.n	8008ace <_free_r+0x42>
 8008ad8:	6811      	ldr	r1, [r2, #0]
 8008ada:	1850      	adds	r0, r2, r1
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d10b      	bne.n	8008af8 <_free_r+0x6c>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	1850      	adds	r0, r2, r1
 8008ae6:	4283      	cmp	r3, r0
 8008ae8:	6011      	str	r1, [r2, #0]
 8008aea:	d1e0      	bne.n	8008aae <_free_r+0x22>
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	6053      	str	r3, [r2, #4]
 8008af2:	4408      	add	r0, r1
 8008af4:	6010      	str	r0, [r2, #0]
 8008af6:	e7da      	b.n	8008aae <_free_r+0x22>
 8008af8:	d902      	bls.n	8008b00 <_free_r+0x74>
 8008afa:	230c      	movs	r3, #12
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	e7d6      	b.n	8008aae <_free_r+0x22>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	1821      	adds	r1, r4, r0
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf04      	itt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	bf04      	itt	eq
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	6054      	str	r4, [r2, #4]
 8008b16:	e7ca      	b.n	8008aae <_free_r+0x22>
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000954 	.word	0x20000954

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
